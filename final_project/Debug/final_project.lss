
final_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007a  00800060  00001cce  00001d62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f0  008000da  008000da  00001ddc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ddc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001e38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000358  00000000  00000000  00001e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003552  00000000  00000000  000021cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fed  00000000  00000000  0000571e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b2b  00000000  00000000  0000670b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000960  00000000  00000000  00008238  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fef  00000000  00000000  00008b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000026fc  00000000  00000000  00009b87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f8  00000000  00000000  0000c283  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
       4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
       8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
       c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      2c:	0c 94 76 05 	jmp	0xaec	; 0xaec <__vector_11>
      30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      34:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__vector_13>
      38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	63 64       	ori	r22, 0x43	; 67
      56:	69 6e       	ori	r22, 0xE9	; 233
      58:	6f 70       	andi	r22, 0x0F	; 15
      5a:	73 75       	andi	r23, 0x53	; 83
      5c:	78 58       	subi	r23, 0x88	; 136
      5e:	5b 00       	.word	0x005b	; ????

00000060 <__ctors_end>:
      60:	11 24       	eor	r1, r1
      62:	1f be       	out	0x3f, r1	; 63
      64:	cf e5       	ldi	r28, 0x5F	; 95
      66:	d8 e0       	ldi	r29, 0x08	; 8
      68:	de bf       	out	0x3e, r29	; 62
      6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
      6c:	10 e0       	ldi	r17, 0x00	; 0
      6e:	a0 e6       	ldi	r26, 0x60	; 96
      70:	b0 e0       	ldi	r27, 0x00	; 0
      72:	ee ec       	ldi	r30, 0xCE	; 206
      74:	fc e1       	ldi	r31, 0x1C	; 28
      76:	02 c0       	rjmp	.+4      	; 0x7c <__do_copy_data+0x10>
      78:	05 90       	lpm	r0, Z+
      7a:	0d 92       	st	X+, r0
      7c:	aa 3d       	cpi	r26, 0xDA	; 218
      7e:	b1 07       	cpc	r27, r17
      80:	d9 f7       	brne	.-10     	; 0x78 <__do_copy_data+0xc>

00000082 <__do_clear_bss>:
      82:	21 e0       	ldi	r18, 0x01	; 1
      84:	aa ed       	ldi	r26, 0xDA	; 218
      86:	b0 e0       	ldi	r27, 0x00	; 0
      88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
      8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
      8c:	aa 3c       	cpi	r26, 0xCA	; 202
      8e:	b2 07       	cpc	r27, r18
      90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
      92:	0e 94 c9 04 	call	0x992	; 0x992 <main>
      96:	0c 94 65 0e 	jmp	0x1cca	; 0x1cca <_exit>

0000009a <__bad_interrupt>:
      9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <Dec2bcd>:
		reg |= Frequency;
	}

	//Write control register
	RTC_WriteByte(__RTC_Address_Control, reg);
}
      9e:	9a e1       	ldi	r25, 0x1A	; 26
      a0:	89 9f       	mul	r24, r25
      a2:	90 01       	movw	r18, r0
      a4:	11 24       	eor	r1, r1
      a6:	93 2f       	mov	r25, r19
      a8:	99 0f       	add	r25, r25
      aa:	93 0f       	add	r25, r19
      ac:	29 2f       	mov	r18, r25
      ae:	22 0f       	add	r18, r18
      b0:	82 0f       	add	r24, r18
      b2:	08 95       	ret

000000b4 <Bcd2dec>:
      b4:	98 2f       	mov	r25, r24
      b6:	92 95       	swap	r25
      b8:	9f 70       	andi	r25, 0x0F	; 15
      ba:	29 2f       	mov	r18, r25
      bc:	22 0f       	add	r18, r18
      be:	92 0f       	add	r25, r18
      c0:	29 2f       	mov	r18, r25
      c2:	22 0f       	add	r18, r18
      c4:	82 1b       	sub	r24, r18
      c6:	08 95       	ret

000000c8 <RTC_Status>:
      c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      cc:	08 95       	ret

000000ce <RTC_WriteBlock>:
      ce:	0f 93       	push	r16
      d0:	1f 93       	push	r17
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	c8 2f       	mov	r28, r24
      d8:	8b 01       	movw	r16, r22
      da:	d4 2f       	mov	r29, r20
      dc:	0e 94 c2 06 	call	0xd84	; 0xd84 <TWI_BeginTransmission>
      e0:	0e 94 bf 06 	call	0xd7e	; 0xd7e <TWI_Status>
      e4:	88 30       	cpi	r24, 0x08	; 8
      e6:	29 f0       	breq	.+10     	; 0xf2 <RTC_WriteBlock+0x24>
      e8:	80 31       	cpi	r24, 0x10	; 16
      ea:	19 f0       	breq	.+6      	; 0xf2 <RTC_WriteBlock+0x24>
      ec:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
      f0:	2e c0       	rjmp	.+92     	; 0x14e <RTC_WriteBlock+0x80>
      f2:	80 ed       	ldi	r24, 0xD0	; 208
      f4:	0e 94 d0 06 	call	0xda0	; 0xda0 <TWI_Transmit>
      f8:	0e 94 bf 06 	call	0xd7e	; 0xd7e <TWI_Status>
      fc:	88 31       	cpi	r24, 0x18	; 24
      fe:	29 f0       	breq	.+10     	; 0x10a <RTC_WriteBlock+0x3c>
     100:	80 32       	cpi	r24, 0x20	; 32
     102:	19 f0       	breq	.+6      	; 0x10a <RTC_WriteBlock+0x3c>
     104:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     108:	22 c0       	rjmp	.+68     	; 0x14e <RTC_WriteBlock+0x80>
     10a:	8c 2f       	mov	r24, r28
     10c:	0e 94 d0 06 	call	0xda0	; 0xda0 <TWI_Transmit>
     110:	0e 94 bf 06 	call	0xd7e	; 0xd7e <TWI_Status>
     114:	88 32       	cpi	r24, 0x28	; 40
     116:	99 f0       	breq	.+38     	; 0x13e <RTC_WriteBlock+0x70>
     118:	80 33       	cpi	r24, 0x30	; 48
     11a:	99 f0       	breq	.+38     	; 0x142 <RTC_WriteBlock+0x74>
     11c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     120:	16 c0       	rjmp	.+44     	; 0x14e <RTC_WriteBlock+0x80>
     122:	f8 01       	movw	r30, r16
     124:	ec 0f       	add	r30, r28
     126:	f1 1d       	adc	r31, r1
     128:	80 81       	ld	r24, Z
     12a:	0e 94 d0 06 	call	0xda0	; 0xda0 <TWI_Transmit>
     12e:	0e 94 bf 06 	call	0xd7e	; 0xd7e <TWI_Status>
     132:	88 32       	cpi	r24, 0x28	; 40
     134:	11 f0       	breq	.+4      	; 0x13a <RTC_WriteBlock+0x6c>
     136:	80 33       	cpi	r24, 0x30	; 48
     138:	39 f4       	brne	.+14     	; 0x148 <RTC_WriteBlock+0x7a>
     13a:	cf 5f       	subi	r28, 0xFF	; 255
     13c:	03 c0       	rjmp	.+6      	; 0x144 <RTC_WriteBlock+0x76>
     13e:	c0 e0       	ldi	r28, 0x00	; 0
     140:	01 c0       	rjmp	.+2      	; 0x144 <RTC_WriteBlock+0x76>
     142:	c0 e0       	ldi	r28, 0x00	; 0
     144:	cd 17       	cp	r28, r29
     146:	68 f3       	brcs	.-38     	; 0x122 <RTC_WriteBlock+0x54>
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     14e:	0e 94 ca 06 	call	0xd94	; 0xd94 <TWI_EndTransmission>
     152:	df 91       	pop	r29
     154:	cf 91       	pop	r28
     156:	1f 91       	pop	r17
     158:	0f 91       	pop	r16
     15a:	08 95       	ret

0000015c <RTC_WriteByte>:
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	1f 92       	push	r1
     162:	cd b7       	in	r28, 0x3d	; 61
     164:	de b7       	in	r29, 0x3e	; 62
     166:	69 83       	std	Y+1, r22	; 0x01
     168:	41 e0       	ldi	r20, 0x01	; 1
     16a:	be 01       	movw	r22, r28
     16c:	6f 5f       	subi	r22, 0xFF	; 255
     16e:	7f 4f       	sbci	r23, 0xFF	; 255
     170:	0e 94 67 00 	call	0xce	; 0xce <RTC_WriteBlock>
     174:	0f 90       	pop	r0
     176:	df 91       	pop	r29
     178:	cf 91       	pop	r28
     17a:	08 95       	ret

0000017c <RTC_ReadBlock>:
     17c:	0f 93       	push	r16
     17e:	1f 93       	push	r17
     180:	cf 93       	push	r28
     182:	df 93       	push	r29
     184:	08 2f       	mov	r16, r24
     186:	eb 01       	movw	r28, r22
     188:	14 2f       	mov	r17, r20
     18a:	0e 94 c2 06 	call	0xd84	; 0xd84 <TWI_BeginTransmission>
     18e:	0e 94 bf 06 	call	0xd7e	; 0xd7e <TWI_Status>
     192:	88 30       	cpi	r24, 0x08	; 8
     194:	29 f0       	breq	.+10     	; 0x1a0 <RTC_ReadBlock+0x24>
     196:	80 31       	cpi	r24, 0x10	; 16
     198:	19 f0       	breq	.+6      	; 0x1a0 <RTC_ReadBlock+0x24>
     19a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     19e:	5c c0       	rjmp	.+184    	; 0x258 <RTC_ReadBlock+0xdc>
     1a0:	80 ed       	ldi	r24, 0xD0	; 208
     1a2:	0e 94 d0 06 	call	0xda0	; 0xda0 <TWI_Transmit>
     1a6:	0e 94 bf 06 	call	0xd7e	; 0xd7e <TWI_Status>
     1aa:	88 31       	cpi	r24, 0x18	; 24
     1ac:	29 f0       	breq	.+10     	; 0x1b8 <RTC_ReadBlock+0x3c>
     1ae:	80 32       	cpi	r24, 0x20	; 32
     1b0:	19 f0       	breq	.+6      	; 0x1b8 <RTC_ReadBlock+0x3c>
     1b2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     1b6:	50 c0       	rjmp	.+160    	; 0x258 <RTC_ReadBlock+0xdc>
     1b8:	80 2f       	mov	r24, r16
     1ba:	0e 94 d0 06 	call	0xda0	; 0xda0 <TWI_Transmit>
     1be:	0e 94 bf 06 	call	0xd7e	; 0xd7e <TWI_Status>
     1c2:	88 32       	cpi	r24, 0x28	; 40
     1c4:	29 f0       	breq	.+10     	; 0x1d0 <RTC_ReadBlock+0x54>
     1c6:	80 33       	cpi	r24, 0x30	; 48
     1c8:	19 f0       	breq	.+6      	; 0x1d0 <RTC_ReadBlock+0x54>
     1ca:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     1ce:	44 c0       	rjmp	.+136    	; 0x258 <RTC_ReadBlock+0xdc>
     1d0:	0e 94 c2 06 	call	0xd84	; 0xd84 <TWI_BeginTransmission>
     1d4:	0e 94 bf 06 	call	0xd7e	; 0xd7e <TWI_Status>
     1d8:	88 30       	cpi	r24, 0x08	; 8
     1da:	29 f0       	breq	.+10     	; 0x1e6 <RTC_ReadBlock+0x6a>
     1dc:	80 31       	cpi	r24, 0x10	; 16
     1de:	19 f0       	breq	.+6      	; 0x1e6 <RTC_ReadBlock+0x6a>
     1e0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     1e4:	39 c0       	rjmp	.+114    	; 0x258 <RTC_ReadBlock+0xdc>
     1e6:	81 ed       	ldi	r24, 0xD1	; 209
     1e8:	0e 94 d0 06 	call	0xda0	; 0xda0 <TWI_Transmit>
     1ec:	0e 94 bf 06 	call	0xd7e	; 0xd7e <TWI_Status>
     1f0:	80 34       	cpi	r24, 0x40	; 64
     1f2:	b1 f0       	breq	.+44     	; 0x220 <RTC_ReadBlock+0xa4>
     1f4:	88 34       	cpi	r24, 0x48	; 72
     1f6:	b1 f0       	breq	.+44     	; 0x224 <RTC_ReadBlock+0xa8>
     1f8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     1fc:	2d c0       	rjmp	.+90     	; 0x258 <RTC_ReadBlock+0xdc>
     1fe:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <TWI_ReceiveACK>
     202:	fe 01       	movw	r30, r28
     204:	e0 0f       	add	r30, r16
     206:	f1 1d       	adc	r31, r1
     208:	80 83       	st	Z, r24
     20a:	0e 94 bf 06 	call	0xd7e	; 0xd7e <TWI_Status>
     20e:	80 35       	cpi	r24, 0x50	; 80
     210:	29 f0       	breq	.+10     	; 0x21c <RTC_ReadBlock+0xa0>
     212:	88 35       	cpi	r24, 0x58	; 88
     214:	19 f0       	breq	.+6      	; 0x21c <RTC_ReadBlock+0xa0>
     216:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     21a:	0d c0       	rjmp	.+26     	; 0x236 <RTC_ReadBlock+0xba>
     21c:	0f 5f       	subi	r16, 0xFF	; 255
     21e:	03 c0       	rjmp	.+6      	; 0x226 <RTC_ReadBlock+0xaa>
     220:	00 e0       	ldi	r16, 0x00	; 0
     222:	01 c0       	rjmp	.+2      	; 0x226 <RTC_ReadBlock+0xaa>
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	20 2f       	mov	r18, r16
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	81 2f       	mov	r24, r17
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	01 97       	sbiw	r24, 0x01	; 1
     230:	28 17       	cp	r18, r24
     232:	39 07       	cpc	r19, r25
     234:	24 f3       	brlt	.-56     	; 0x1fe <RTC_ReadBlock+0x82>
     236:	c0 0f       	add	r28, r16
     238:	d1 1d       	adc	r29, r1
     23a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <TWI_ReceiveNACK>
     23e:	88 83       	st	Y, r24
     240:	0e 94 bf 06 	call	0xd7e	; 0xd7e <TWI_Status>
     244:	80 35       	cpi	r24, 0x50	; 80
     246:	29 f0       	breq	.+10     	; 0x252 <RTC_ReadBlock+0xd6>
     248:	88 35       	cpi	r24, 0x58	; 88
     24a:	19 f0       	breq	.+6      	; 0x252 <RTC_ReadBlock+0xd6>
     24c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     250:	03 c0       	rjmp	.+6      	; 0x258 <RTC_ReadBlock+0xdc>
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     258:	0e 94 ca 06 	call	0xd94	; 0xd94 <TWI_EndTransmission>
     25c:	df 91       	pop	r29
     25e:	cf 91       	pop	r28
     260:	1f 91       	pop	r17
     262:	0f 91       	pop	r16
     264:	08 95       	ret

00000266 <RTC_Set>:
     266:	af 92       	push	r10
     268:	bf 92       	push	r11
     26a:	cf 92       	push	r12
     26c:	df 92       	push	r13
     26e:	ef 92       	push	r14
     270:	ff 92       	push	r15
     272:	0f 93       	push	r16
     274:	1f 93       	push	r17
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
     27e:	28 97       	sbiw	r28, 0x08	; 8
     280:	0f b6       	in	r0, 0x3f	; 63
     282:	f8 94       	cli
     284:	de bf       	out	0x3e, r29	; 62
     286:	0f be       	out	0x3f, r0	; 63
     288:	cd bf       	out	0x3d, r28	; 61
     28a:	a3 2e       	mov	r10, r19
     28c:	b4 2e       	mov	r11, r20
     28e:	c5 2e       	mov	r12, r21
     290:	d6 2e       	mov	r13, r22
     292:	e7 2e       	mov	r14, r23
     294:	f8 2e       	mov	r15, r24
     296:	82 2f       	mov	r24, r18
     298:	0e 94 4f 00 	call	0x9e	; 0x9e <Dec2bcd>
     29c:	0c ee       	ldi	r16, 0xEC	; 236
     29e:	10 e0       	ldi	r17, 0x00	; 0
     2a0:	f8 01       	movw	r30, r16
     2a2:	80 83       	st	Z, r24
     2a4:	8a 2d       	mov	r24, r10
     2a6:	0e 94 4f 00 	call	0x9e	; 0x9e <Dec2bcd>
     2aa:	f8 01       	movw	r30, r16
     2ac:	81 83       	std	Z+1, r24	; 0x01
     2ae:	8b 2d       	mov	r24, r11
     2b0:	0e 94 4f 00 	call	0x9e	; 0x9e <Dec2bcd>
     2b4:	f8 01       	movw	r30, r16
     2b6:	82 83       	std	Z+2, r24	; 0x02
     2b8:	8c 2d       	mov	r24, r12
     2ba:	0e 94 4f 00 	call	0x9e	; 0x9e <Dec2bcd>
     2be:	f8 01       	movw	r30, r16
     2c0:	83 83       	std	Z+3, r24	; 0x03
     2c2:	8d 2d       	mov	r24, r13
     2c4:	0e 94 4f 00 	call	0x9e	; 0x9e <Dec2bcd>
     2c8:	f8 01       	movw	r30, r16
     2ca:	84 83       	std	Z+4, r24	; 0x04
     2cc:	8e 2d       	mov	r24, r14
     2ce:	0e 94 4f 00 	call	0x9e	; 0x9e <Dec2bcd>
     2d2:	f8 01       	movw	r30, r16
     2d4:	85 83       	std	Z+5, r24	; 0x05
     2d6:	80 e3       	ldi	r24, 0x30	; 48
     2d8:	8f 0d       	add	r24, r15
     2da:	0e 94 4f 00 	call	0x9e	; 0x9e <Dec2bcd>
     2de:	f8 01       	movw	r30, r16
     2e0:	86 83       	std	Z+6, r24	; 0x06
     2e2:	47 e0       	ldi	r20, 0x07	; 7
     2e4:	b8 01       	movw	r22, r16
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	0e 94 67 00 	call	0xce	; 0xce <RTC_WriteBlock>
     2ec:	28 96       	adiw	r28, 0x08	; 8
     2ee:	0f b6       	in	r0, 0x3f	; 63
     2f0:	f8 94       	cli
     2f2:	de bf       	out	0x3e, r29	; 62
     2f4:	0f be       	out	0x3f, r0	; 63
     2f6:	cd bf       	out	0x3d, r28	; 61
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	1f 91       	pop	r17
     2fe:	0f 91       	pop	r16
     300:	ff 90       	pop	r15
     302:	ef 90       	pop	r14
     304:	df 90       	pop	r13
     306:	cf 90       	pop	r12
     308:	bf 90       	pop	r11
     30a:	af 90       	pop	r10
     30c:	08 95       	ret

0000030e <RTC_Get>:
     30e:	0f 93       	push	r16
     310:	1f 93       	push	r17
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	60 97       	sbiw	r28, 0x10	; 16
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	de bf       	out	0x3e, r29	; 62
     322:	0f be       	out	0x3f, r0	; 63
     324:	cd bf       	out	0x3d, r28	; 61
     326:	47 e0       	ldi	r20, 0x07	; 7
     328:	6c ee       	ldi	r22, 0xEC	; 236
     32a:	70 e0       	ldi	r23, 0x00	; 0
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	0e 94 be 00 	call	0x17c	; 0x17c <RTC_ReadBlock>
     332:	0c ee       	ldi	r16, 0xEC	; 236
     334:	10 e0       	ldi	r17, 0x00	; 0
     336:	f8 01       	movw	r30, r16
     338:	80 81       	ld	r24, Z
     33a:	0e 94 5a 00 	call	0xb4	; 0xb4 <Bcd2dec>
     33e:	89 87       	std	Y+9, r24	; 0x09
     340:	f8 01       	movw	r30, r16
     342:	81 81       	ldd	r24, Z+1	; 0x01
     344:	0e 94 5a 00 	call	0xb4	; 0xb4 <Bcd2dec>
     348:	8a 87       	std	Y+10, r24	; 0x0a
     34a:	f8 01       	movw	r30, r16
     34c:	82 81       	ldd	r24, Z+2	; 0x02
     34e:	8f 73       	andi	r24, 0x3F	; 63
     350:	0e 94 5a 00 	call	0xb4	; 0xb4 <Bcd2dec>
     354:	8b 87       	std	Y+11, r24	; 0x0b
     356:	f8 01       	movw	r30, r16
     358:	83 81       	ldd	r24, Z+3	; 0x03
     35a:	0e 94 5a 00 	call	0xb4	; 0xb4 <Bcd2dec>
     35e:	8c 87       	std	Y+12, r24	; 0x0c
     360:	f8 01       	movw	r30, r16
     362:	84 81       	ldd	r24, Z+4	; 0x04
     364:	0e 94 5a 00 	call	0xb4	; 0xb4 <Bcd2dec>
     368:	8d 87       	std	Y+13, r24	; 0x0d
     36a:	f8 01       	movw	r30, r16
     36c:	85 81       	ldd	r24, Z+5	; 0x05
     36e:	0e 94 5a 00 	call	0xb4	; 0xb4 <Bcd2dec>
     372:	8e 87       	std	Y+14, r24	; 0x0e
     374:	f8 01       	movw	r30, r16
     376:	86 81       	ldd	r24, Z+6	; 0x06
     378:	0e 94 5a 00 	call	0xb4	; 0xb4 <Bcd2dec>
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	80 53       	subi	r24, 0x30	; 48
     380:	98 4f       	sbci	r25, 0xF8	; 248
     382:	98 8b       	std	Y+16, r25	; 0x10
     384:	8f 87       	std	Y+15, r24	; 0x0f
     386:	88 e0       	ldi	r24, 0x08	; 8
     388:	fe 01       	movw	r30, r28
     38a:	39 96       	adiw	r30, 0x09	; 9
     38c:	de 01       	movw	r26, r28
     38e:	11 96       	adiw	r26, 0x01	; 1
     390:	01 90       	ld	r0, Z+
     392:	0d 92       	st	X+, r0
     394:	8a 95       	dec	r24
     396:	e1 f7       	brne	.-8      	; 0x390 <RTC_Get+0x82>
     398:	29 81       	ldd	r18, Y+1	; 0x01
     39a:	3a 81       	ldd	r19, Y+2	; 0x02
     39c:	4b 81       	ldd	r20, Y+3	; 0x03
     39e:	5c 81       	ldd	r21, Y+4	; 0x04
     3a0:	6d 81       	ldd	r22, Y+5	; 0x05
     3a2:	7e 81       	ldd	r23, Y+6	; 0x06
     3a4:	8f 81       	ldd	r24, Y+7	; 0x07
     3a6:	98 85       	ldd	r25, Y+8	; 0x08
     3a8:	60 96       	adiw	r28, 0x10	; 16
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	f8 94       	cli
     3ae:	de bf       	out	0x3e, r29	; 62
     3b0:	0f be       	out	0x3f, r0	; 63
     3b2:	cd bf       	out	0x3d, r28	; 61
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28
     3b8:	1f 91       	pop	r17
     3ba:	0f 91       	pop	r16
     3bc:	08 95       	ret

000003be <RTC_AlarmSet>:

//Set alarm.
void RTC_AlarmSet(Alarm_Type_t Alarm, uint8_t DayDate, uint8_t Hours, uint8_t Minutes, uint8_t Seconds)
{
     3be:	ef 92       	push	r14
     3c0:	ff 92       	push	r15
     3c2:	0f 93       	push	r16
     3c4:	1f 93       	push	r17
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	c8 2f       	mov	r28, r24
     3cc:	d6 2f       	mov	r29, r22
     3ce:	14 2f       	mov	r17, r20
     3d0:	e2 2e       	mov	r14, r18
     3d2:	80 2f       	mov	r24, r16
	uint8_t addr;

	//Convert all decimal values to their corresponding BCD values
	Seconds = Dec2bcd(Seconds);
     3d4:	0e 94 4f 00 	call	0x9e	; 0x9e <Dec2bcd>
     3d8:	f8 2e       	mov	r15, r24
	Minutes = Dec2bcd(Minutes);
     3da:	8e 2d       	mov	r24, r14
     3dc:	0e 94 4f 00 	call	0x9e	; 0x9e <Dec2bcd>
     3e0:	08 2f       	mov	r16, r24
	Hours   = Dec2bcd(Hours);
     3e2:	81 2f       	mov	r24, r17
     3e4:	0e 94 4f 00 	call	0x9e	; 0x9e <Dec2bcd>
     3e8:	18 2f       	mov	r17, r24
	DayDate = Dec2bcd(DayDate);	//Either Day or Date can be used. Not both.
     3ea:	8d 2f       	mov	r24, r29
     3ec:	0e 94 4f 00 	call	0x9e	; 0x9e <Dec2bcd>
     3f0:	d8 2f       	mov	r29, r24
	
	//Set Alarm Control Bits based on Alarm Mask Bits
	//Seconds
	if (BitCheck(Alarm, 0))
     3f2:	c0 ff       	sbrs	r28, 0
     3f4:	03 c0       	rjmp	.+6      	; 0x3fc <RTC_AlarmSet+0x3e>
		BitSet(Seconds, __RTC_A1M1);
     3f6:	8f 2d       	mov	r24, r15
     3f8:	80 68       	ori	r24, 0x80	; 128
     3fa:	f8 2e       	mov	r15, r24
	//Minutes
	if (BitCheck(Alarm, 1))
     3fc:	c1 fd       	sbrc	r28, 1
		BitSet(Minutes, __RTC_A1M2);
     3fe:	00 68       	ori	r16, 0x80	; 128
	//Hours
	if (BitCheck(Alarm, 2))
     400:	c2 fd       	sbrc	r28, 2
		BitSet(Hours, __RTC_A1M3);
     402:	10 68       	ori	r17, 0x80	; 128
	//Day-Date value
	if (BitCheck(Alarm, 3))
     404:	c3 fd       	sbrc	r28, 3
		BitSet(DayDate, __RTC_A1M4);
     406:	d0 68       	ori	r29, 0x80	; 128
	//Day-Date flag
	if (BitCheck(Alarm, 4))
     408:	c4 fd       	sbrc	r28, 4
		BitSet(DayDate, __RTC_DYDT);
     40a:	d0 64       	ori	r29, 0x40	; 64
	
	//Send data (on consecutive address)
	//Alarm 2
	if (BitCheck(Alarm, 7))
     40c:	cc 23       	and	r28, r28
     40e:	34 f0       	brlt	.+12     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
	//Alarm 1
	else
	{
		//Alarm 1 does have a seconds register
		addr = __RTC_Address_Alarm1_Seconds;
		RTC_WriteByte(addr++, Seconds);
     410:	6f 2d       	mov	r22, r15
     412:	87 e0       	ldi	r24, 0x07	; 7
     414:	0e 94 ae 00 	call	0x15c	; 0x15c <RTC_WriteByte>
     418:	c8 e0       	ldi	r28, 0x08	; 8
     41a:	01 c0       	rjmp	.+2      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
	//Send data (on consecutive address)
	//Alarm 2
	if (BitCheck(Alarm, 7))
	{
		//Alarm 2 does not have seconds register
		addr = __RTC_Address_Alarm2_Minutes;
     41c:	cb e0       	ldi	r28, 0x0B	; 11
	{
		//Alarm 1 does have a seconds register
		addr = __RTC_Address_Alarm1_Seconds;
		RTC_WriteByte(addr++, Seconds);
	}
	RTC_WriteByte(addr++, Minutes);
     41e:	ff 24       	eor	r15, r15
     420:	f3 94       	inc	r15
     422:	fc 0e       	add	r15, r28
     424:	60 2f       	mov	r22, r16
     426:	8c 2f       	mov	r24, r28
     428:	0e 94 ae 00 	call	0x15c	; 0x15c <RTC_WriteByte>
	RTC_WriteByte(addr++, Hours);
     42c:	ce 5f       	subi	r28, 0xFE	; 254
     42e:	61 2f       	mov	r22, r17
     430:	8f 2d       	mov	r24, r15
     432:	0e 94 ae 00 	call	0x15c	; 0x15c <RTC_WriteByte>
	RTC_WriteByte(addr++, DayDate);
     436:	6d 2f       	mov	r22, r29
     438:	8c 2f       	mov	r24, r28
     43a:	0e 94 ae 00 	call	0x15c	; 0x15c <RTC_WriteByte>
}
     43e:	df 91       	pop	r29
     440:	cf 91       	pop	r28
     442:	1f 91       	pop	r17
     444:	0f 91       	pop	r16
     446:	ff 90       	pop	r15
     448:	ef 90       	pop	r14
     44a:	08 95       	ret

0000044c <i2c_master_init>:
	}
	
	i2c_master_stop();
	
	return I2C_STATUS_SUCCESS;
}
     44c:	9b 01       	movw	r18, r22
     44e:	ac 01       	movw	r20, r24
     450:	11 b8       	out	0x01, r1	; 1
     452:	60 e0       	ldi	r22, 0x00	; 0
     454:	72 e1       	ldi	r23, 0x12	; 18
     456:	8a e7       	ldi	r24, 0x7A	; 122
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	0e 94 0b 08 	call	0x1016	; 0x1016 <__udivmodsi4>
     45e:	da 01       	movw	r26, r20
     460:	c9 01       	movw	r24, r18
     462:	40 97       	sbiw	r24, 0x10	; 16
     464:	a1 09       	sbc	r26, r1
     466:	b1 09       	sbc	r27, r1
     468:	b6 95       	lsr	r27
     46a:	a7 95       	ror	r26
     46c:	97 95       	ror	r25
     46e:	87 95       	ror	r24
     470:	80 b9       	out	0x00, r24	; 0
     472:	08 95       	ret

00000474 <i2c_master_start>:
     474:	16 be       	out	0x36, r1	; 54
     476:	94 ea       	ldi	r25, 0xA4	; 164
     478:	96 bf       	out	0x36, r25	; 54
     47a:	06 b6       	in	r0, 0x36	; 54
     47c:	07 fe       	sbrs	r0, 7
     47e:	fd cf       	rjmp	.-6      	; 0x47a <i2c_master_start+0x6>
     480:	91 b1       	in	r25, 0x01	; 1
     482:	98 7f       	andi	r25, 0xF8	; 248
     484:	98 30       	cpi	r25, 0x08	; 8
     486:	11 f0       	breq	.+4      	; 0x48c <i2c_master_start+0x18>
     488:	90 31       	cpi	r25, 0x10	; 16
     48a:	91 f4       	brne	.+36     	; 0x4b0 <i2c_master_start+0x3c>
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	88 0f       	add	r24, r24
     490:	99 1f       	adc	r25, r25
     492:	86 2b       	or	r24, r22
     494:	83 b9       	out	0x03, r24	; 3
     496:	84 e8       	ldi	r24, 0x84	; 132
     498:	86 bf       	out	0x36, r24	; 54
     49a:	06 b6       	in	r0, 0x36	; 54
     49c:	07 fe       	sbrs	r0, 7
     49e:	fd cf       	rjmp	.-6      	; 0x49a <i2c_master_start+0x26>
     4a0:	81 b1       	in	r24, 0x01	; 1
     4a2:	88 7f       	andi	r24, 0xF8	; 248
     4a4:	88 31       	cpi	r24, 0x18	; 24
     4a6:	31 f0       	breq	.+12     	; 0x4b4 <i2c_master_start+0x40>
     4a8:	80 34       	cpi	r24, 0x40	; 64
     4aa:	31 f4       	brne	.+12     	; 0x4b8 <i2c_master_start+0x44>
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	08 95       	ret
     4b0:	8a e0       	ldi	r24, 0x0A	; 10
     4b2:	08 95       	ret
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	08 95       	ret
     4b8:	84 e1       	ldi	r24, 0x14	; 20
     4ba:	08 95       	ret

000004bc <i2c_master_write>:
     4bc:	83 b9       	out	0x03, r24	; 3
     4be:	84 e8       	ldi	r24, 0x84	; 132
     4c0:	86 bf       	out	0x36, r24	; 54
     4c2:	06 b6       	in	r0, 0x36	; 54
     4c4:	07 fe       	sbrs	r0, 7
     4c6:	fd cf       	rjmp	.-6      	; 0x4c2 <i2c_master_write+0x6>
     4c8:	81 b1       	in	r24, 0x01	; 1
     4ca:	88 7f       	andi	r24, 0xF8	; 248
     4cc:	88 32       	cpi	r24, 0x28	; 40
     4ce:	11 f0       	breq	.+4      	; 0x4d4 <i2c_master_write+0x18>
     4d0:	85 e1       	ldi	r24, 0x15	; 21
     4d2:	08 95       	ret
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	08 95       	ret

000004d8 <i2c_master_stop>:
     4d8:	84 e9       	ldi	r24, 0x94	; 148
     4da:	86 bf       	out	0x36, r24	; 54
     4dc:	08 95       	ret

000004de <i2c_master_sendByte>:

uint8_t i2c_master_sendByte(uint8_t address, uint8_t data)
{
     4de:	cf 93       	push	r28
     4e0:	c6 2f       	mov	r28, r22
	uint8_t status = i2c_master_start(address, I2C_WRITE);
     4e2:	60 e0       	ldi	r22, 0x00	; 0
     4e4:	0e 94 3a 02 	call	0x474	; 0x474 <i2c_master_start>
	if (status) return status;
     4e8:	81 11       	cpse	r24, r1
     4ea:	08 c0       	rjmp	.+16     	; 0x4fc <i2c_master_sendByte+0x1e>

	status = i2c_master_write(data);
     4ec:	8c 2f       	mov	r24, r28
     4ee:	0e 94 5e 02 	call	0x4bc	; 0x4bc <i2c_master_write>
	if (status) return status;
     4f2:	81 11       	cpse	r24, r1
     4f4:	03 c0       	rjmp	.+6      	; 0x4fc <i2c_master_sendByte+0x1e>

	i2c_master_stop();
     4f6:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_master_stop>
	
	return I2C_STATUS_SUCCESS;
     4fa:	80 e0       	ldi	r24, 0x00	; 0
};
     4fc:	cf 91       	pop	r28
     4fe:	08 95       	ret

00000500 <lq_transmitI2C>:

	for (i = 0; i < 8; i++) 
	{
		lq_writeDeviceByte(device, charmap[i], LCD_REGISTER_SELECT_BIT);
	}
}
     500:	fc 01       	movw	r30, r24
     502:	23 81       	ldd	r18, Z+3	; 0x03
     504:	62 2b       	or	r22, r18
     506:	80 81       	ld	r24, Z
     508:	0e 94 6f 02 	call	0x4de	; 0x4de <i2c_master_sendByte>
     50c:	08 95       	ret

0000050e <lq_writeDevicePulse>:
     50e:	0f 93       	push	r16
     510:	1f 93       	push	r17
     512:	cf 93       	push	r28
     514:	8c 01       	movw	r16, r24
     516:	c6 2f       	mov	r28, r22
     518:	64 60       	ori	r22, 0x04	; 4
     51a:	0e 94 80 02 	call	0x500	; 0x500 <lq_transmitI2C>
     51e:	8a e0       	ldi	r24, 0x0A	; 10
     520:	8a 95       	dec	r24
     522:	f1 f7       	brne	.-4      	; 0x520 <lq_writeDevicePulse+0x12>
     524:	00 c0       	rjmp	.+0      	; 0x526 <lq_writeDevicePulse+0x18>
     526:	6c 2f       	mov	r22, r28
     528:	6b 7f       	andi	r22, 0xFB	; 251
     52a:	c8 01       	movw	r24, r16
     52c:	0e 94 80 02 	call	0x500	; 0x500 <lq_transmitI2C>
     530:	87 ec       	ldi	r24, 0xC7	; 199
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	01 97       	sbiw	r24, 0x01	; 1
     536:	f1 f7       	brne	.-4      	; 0x534 <lq_writeDevicePulse+0x26>
     538:	00 c0       	rjmp	.+0      	; 0x53a <lq_writeDevicePulse+0x2c>
     53a:	00 00       	nop
     53c:	cf 91       	pop	r28
     53e:	1f 91       	pop	r17
     540:	0f 91       	pop	r16
     542:	08 95       	ret

00000544 <lq_writeDevice4Bits>:
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	ec 01       	movw	r28, r24
     54c:	16 2f       	mov	r17, r22
     54e:	0e 94 80 02 	call	0x500	; 0x500 <lq_transmitI2C>
     552:	61 2f       	mov	r22, r17
     554:	ce 01       	movw	r24, r28
     556:	0e 94 87 02 	call	0x50e	; 0x50e <lq_writeDevicePulse>
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	1f 91       	pop	r17
     560:	08 95       	ret

00000562 <lq_writeDeviceByte>:
     562:	ff 92       	push	r15
     564:	0f 93       	push	r16
     566:	1f 93       	push	r17
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	8c 01       	movw	r16, r24
     56e:	f4 2e       	mov	r15, r20
     570:	86 2f       	mov	r24, r22
     572:	80 7f       	andi	r24, 0xF0	; 240
     574:	90 e1       	ldi	r25, 0x10	; 16
     576:	69 9f       	mul	r22, r25
     578:	e0 01       	movw	r28, r0
     57a:	11 24       	eor	r1, r1
     57c:	68 2f       	mov	r22, r24
     57e:	64 2b       	or	r22, r20
     580:	c8 01       	movw	r24, r16
     582:	0e 94 a2 02 	call	0x544	; 0x544 <lq_writeDevice4Bits>
     586:	6c 2f       	mov	r22, r28
     588:	6f 29       	or	r22, r15
     58a:	c8 01       	movw	r24, r16
     58c:	0e 94 a2 02 	call	0x544	; 0x544 <lq_writeDevice4Bits>
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	1f 91       	pop	r17
     596:	0f 91       	pop	r16
     598:	ff 90       	pop	r15
     59a:	08 95       	ret

0000059c <lq_print>:
     59c:	0f 93       	push	r16
     59e:	1f 93       	push	r17
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	8c 01       	movw	r16, r24
     5a6:	eb 01       	movw	r28, r22
     5a8:	68 81       	ld	r22, Y
     5aa:	06 c0       	rjmp	.+12     	; 0x5b8 <lq_print+0x1c>
     5ac:	41 e0       	ldi	r20, 0x01	; 1
     5ae:	c8 01       	movw	r24, r16
     5b0:	0e 94 b1 02 	call	0x562	; 0x562 <lq_writeDeviceByte>
     5b4:	21 96       	adiw	r28, 0x01	; 1
     5b6:	68 81       	ld	r22, Y
     5b8:	61 11       	cpse	r22, r1
     5ba:	f8 cf       	rjmp	.-16     	; 0x5ac <lq_print+0x10>
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	1f 91       	pop	r17
     5c2:	0f 91       	pop	r16
     5c4:	08 95       	ret

000005c6 <lq_sendCommand>:
     5c6:	40 e0       	ldi	r20, 0x00	; 0
     5c8:	0e 94 b1 02 	call	0x562	; 0x562 <lq_writeDeviceByte>
     5cc:	08 95       	ret

000005ce <lq_setCursor>:
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	00 d0       	rcall	.+0      	; 0x5d4 <lq_setCursor+0x6>
     5d4:	00 d0       	rcall	.+0      	; 0x5d6 <lq_setCursor+0x8>
     5d6:	cd b7       	in	r28, 0x3d	; 61
     5d8:	de b7       	in	r29, 0x3e	; 62
     5da:	19 82       	std	Y+1, r1	; 0x01
     5dc:	20 e4       	ldi	r18, 0x40	; 64
     5de:	2a 83       	std	Y+2, r18	; 0x02
     5e0:	24 e1       	ldi	r18, 0x14	; 20
     5e2:	2b 83       	std	Y+3, r18	; 0x03
     5e4:	24 e5       	ldi	r18, 0x54	; 84
     5e6:	2c 83       	std	Y+4, r18	; 0x04
     5e8:	e1 e0       	ldi	r30, 0x01	; 1
     5ea:	f0 e0       	ldi	r31, 0x00	; 0
     5ec:	ec 0f       	add	r30, r28
     5ee:	fd 1f       	adc	r31, r29
     5f0:	e6 0f       	add	r30, r22
     5f2:	f1 1d       	adc	r31, r1
     5f4:	60 81       	ld	r22, Z
     5f6:	64 0f       	add	r22, r20
     5f8:	60 68       	ori	r22, 0x80	; 128
     5fa:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <lq_sendCommand>
     5fe:	0f 90       	pop	r0
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
     604:	0f 90       	pop	r0
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	08 95       	ret

0000060c <lq_clear>:
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	ec 01       	movw	r28, r24
     612:	61 e0       	ldi	r22, 0x01	; 1
     614:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <lq_sendCommand>
     618:	8f e3       	ldi	r24, 0x3F	; 63
     61a:	9f e1       	ldi	r25, 0x1F	; 31
     61c:	01 97       	sbiw	r24, 0x01	; 1
     61e:	f1 f7       	brne	.-4      	; 0x61c <lq_clear+0x10>
     620:	00 c0       	rjmp	.+0      	; 0x622 <lq_clear+0x16>
     622:	00 00       	nop
     624:	40 e0       	ldi	r20, 0x00	; 0
     626:	60 e0       	ldi	r22, 0x00	; 0
     628:	ce 01       	movw	r24, r28
     62a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <lq_setCursor>
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	08 95       	ret

00000634 <lq_returnHome>:
     634:	62 e0       	ldi	r22, 0x02	; 2
     636:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <lq_sendCommand>
     63a:	8f e3       	ldi	r24, 0x3F	; 63
     63c:	9f e1       	ldi	r25, 0x1F	; 31
     63e:	01 97       	sbiw	r24, 0x01	; 1
     640:	f1 f7       	brne	.-4      	; 0x63e <lq_returnHome+0xa>
     642:	00 c0       	rjmp	.+0      	; 0x644 <lq_returnHome+0x10>
     644:	00 00       	nop
     646:	08 95       	ret

00000648 <lq_turnOnDisplay>:
     648:	fc 01       	movw	r30, r24
     64a:	65 81       	ldd	r22, Z+5	; 0x05
     64c:	26 2f       	mov	r18, r22
     64e:	24 60       	ori	r18, 0x04	; 4
     650:	25 83       	std	Z+5, r18	; 0x05
     652:	6c 60       	ori	r22, 0x0C	; 12
     654:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <lq_sendCommand>
     658:	08 95       	ret

0000065a <lq_init>:

#include <avr/io.h>
#include <util/delay.h>

LiquidCrystalDevice_t lq_init(uint8_t address, uint8_t columns, uint8_t rows, uint8_t dotSize)
{
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	cd b7       	in	r28, 0x3d	; 61
     660:	de b7       	in	r29, 0x3e	; 62
     662:	2e 97       	sbiw	r28, 0x0e	; 14
     664:	0f b6       	in	r0, 0x3f	; 63
     666:	f8 94       	cli
     668:	de bf       	out	0x3e, r29	; 62
     66a:	0f be       	out	0x3f, r0	; 63
     66c:	cd bf       	out	0x3d, r28	; 61
	LiquidCrystalDevice_t device;

	device.Address = address;
     66e:	88 87       	std	Y+8, r24	; 0x08
	device.Columns = columns;
     670:	69 87       	std	Y+9, r22	; 0x09
	device.Rows = rows;
     672:	4a 87       	std	Y+10, r20	; 0x0a
	device.Backlight = LCD_NOBACKLIGHT;
     674:	1b 86       	std	Y+11, r1	; 0x0b
	device.DisplayFunction = LCD_4BITMODE | LCD_1LINE | dotSize;
     676:	2c 87       	std	Y+12, r18	; 0x0c
	device.DisplayControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
     678:	84 e0       	ldi	r24, 0x04	; 4
     67a:	8d 87       	std	Y+13, r24	; 0x0d

	// Initialize to default text direction (for roman languages)
	device.DisplayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
     67c:	82 e0       	ldi	r24, 0x02	; 2
     67e:	8e 87       	std	Y+14, r24	; 0x0e

	if (rows > 1) {
     680:	42 30       	cpi	r20, 0x02	; 2
     682:	18 f0       	brcs	.+6      	; 0x68a <lq_init+0x30>
		device.DisplayFunction |= LCD_2LINE;
     684:	82 2f       	mov	r24, r18
     686:	88 60       	ori	r24, 0x08	; 8
     688:	8c 87       	std	Y+12, r24	; 0x0c
	}

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotSize != 0) && (rows == 1)) {
     68a:	22 23       	and	r18, r18
     68c:	29 f0       	breq	.+10     	; 0x698 <lq_init+0x3e>
     68e:	41 30       	cpi	r20, 0x01	; 1
     690:	19 f4       	brne	.+6      	; 0x698 <lq_init+0x3e>
		device.DisplayFunction |= LCD_5x10DOTS;
     692:	8c 85       	ldd	r24, Y+12	; 0x0c
     694:	84 60       	ori	r24, 0x04	; 4
     696:	8c 87       	std	Y+12, r24	; 0x0c
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     698:	2f ef       	ldi	r18, 0xFF	; 255
     69a:	81 ee       	ldi	r24, 0xE1	; 225
     69c:	94 e0       	ldi	r25, 0x04	; 4
     69e:	21 50       	subi	r18, 0x01	; 1
     6a0:	80 40       	sbci	r24, 0x00	; 0
     6a2:	90 40       	sbci	r25, 0x00	; 0
     6a4:	e1 f7       	brne	.-8      	; 0x69e <lq_init+0x44>
     6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <lq_init+0x4e>
     6a8:	00 00       	nop
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	_delay_ms(100);
	
	// Now we pull both RS and R/W low to begin commands
	lq_transmitI2C(&device, LCD_NOBACKLIGHT);	// reset expanderand turn backlight off (Bit 8 =1)
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	ce 01       	movw	r24, r28
     6ae:	08 96       	adiw	r24, 0x08	; 8
     6b0:	0e 94 80 02 	call	0x500	; 0x500 <lq_transmitI2C>
     6b4:	2f ef       	ldi	r18, 0xFF	; 255
     6b6:	81 ee       	ldi	r24, 0xE1	; 225
     6b8:	94 e0       	ldi	r25, 0x04	; 4
     6ba:	21 50       	subi	r18, 0x01	; 1
     6bc:	80 40       	sbci	r24, 0x00	; 0
     6be:	90 40       	sbci	r25, 0x00	; 0
     6c0:	e1 f7       	brne	.-8      	; 0x6ba <lq_init+0x60>
     6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <lq_init+0x6a>
     6c4:	00 00       	nop
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	// we start in 8bit mode, try to set 4 bit mode
	lq_transmitI2C(&device, 0x03 << 4);
     6c6:	60 e3       	ldi	r22, 0x30	; 48
     6c8:	ce 01       	movw	r24, r28
     6ca:	08 96       	adiw	r24, 0x08	; 8
     6cc:	0e 94 80 02 	call	0x500	; 0x500 <lq_transmitI2C>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6d0:	8f e4       	ldi	r24, 0x4F	; 79
     6d2:	96 e4       	ldi	r25, 0x46	; 70
     6d4:	01 97       	sbiw	r24, 0x01	; 1
     6d6:	f1 f7       	brne	.-4      	; 0x6d4 <lq_init+0x7a>
     6d8:	00 c0       	rjmp	.+0      	; 0x6da <lq_init+0x80>
     6da:	00 00       	nop
	_delay_us(4500); // wait min 4.1ms
	
	// second try
	lq_writeDevice4Bits(&device, 0x03 << 4);
     6dc:	60 e3       	ldi	r22, 0x30	; 48
     6de:	ce 01       	movw	r24, r28
     6e0:	08 96       	adiw	r24, 0x08	; 8
     6e2:	0e 94 a2 02 	call	0x544	; 0x544 <lq_writeDevice4Bits>
     6e6:	8f e4       	ldi	r24, 0x4F	; 79
     6e8:	96 e4       	ldi	r25, 0x46	; 70
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <lq_init+0x90>
     6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <lq_init+0x96>
     6f0:	00 00       	nop
	_delay_us(4500); // wait min 4.1ms
	
	// third go!
	lq_writeDevice4Bits(&device, 0x03 << 4);
     6f2:	60 e3       	ldi	r22, 0x30	; 48
     6f4:	ce 01       	movw	r24, r28
     6f6:	08 96       	adiw	r24, 0x08	; 8
     6f8:	0e 94 a2 02 	call	0x544	; 0x544 <lq_writeDevice4Bits>
     6fc:	87 e5       	ldi	r24, 0x57	; 87
     6fe:	92 e0       	ldi	r25, 0x02	; 2
     700:	01 97       	sbiw	r24, 0x01	; 1
     702:	f1 f7       	brne	.-4      	; 0x700 <lq_init+0xa6>
     704:	00 c0       	rjmp	.+0      	; 0x706 <lq_init+0xac>
     706:	00 00       	nop
	_delay_us(150); // wait min 150 mics
	
	// finally, set to 4-bit interface
	lq_writeDevice4Bits(&device, 0x02 << 4);
     708:	60 e2       	ldi	r22, 0x20	; 32
     70a:	ce 01       	movw	r24, r28
     70c:	08 96       	adiw	r24, 0x08	; 8
     70e:	0e 94 a2 02 	call	0x544	; 0x544 <lq_writeDevice4Bits>

	// set # lines, font size, etc.
	lq_sendCommand(&device, LCD_FUNCTIONSET | device.DisplayFunction);
     712:	6c 85       	ldd	r22, Y+12	; 0x0c
     714:	60 62       	ori	r22, 0x20	; 32
     716:	ce 01       	movw	r24, r28
     718:	08 96       	adiw	r24, 0x08	; 8
     71a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <lq_sendCommand>
	
	// turn the display on with no cursor or blinking default
	lq_turnOnDisplay(&device);
     71e:	ce 01       	movw	r24, r28
     720:	08 96       	adiw	r24, 0x08	; 8
     722:	0e 94 24 03 	call	0x648	; 0x648 <lq_turnOnDisplay>
	
	// clear it off
	lq_clear(&device);
     726:	ce 01       	movw	r24, r28
     728:	08 96       	adiw	r24, 0x08	; 8
     72a:	0e 94 06 03 	call	0x60c	; 0x60c <lq_clear>
	
	// set the entry mode
	lq_sendCommand(&device, LCD_ENTRYMODESET | device.DisplayMode);
     72e:	6e 85       	ldd	r22, Y+14	; 0x0e
     730:	64 60       	ori	r22, 0x04	; 4
     732:	ce 01       	movw	r24, r28
     734:	08 96       	adiw	r24, 0x08	; 8
     736:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <lq_sendCommand>
	
	lq_returnHome(&device);
     73a:	ce 01       	movw	r24, r28
     73c:	08 96       	adiw	r24, 0x08	; 8
     73e:	0e 94 1a 03 	call	0x634	; 0x634 <lq_returnHome>

	return device;
     742:	87 e0       	ldi	r24, 0x07	; 7
     744:	fe 01       	movw	r30, r28
     746:	38 96       	adiw	r30, 0x08	; 8
     748:	de 01       	movw	r26, r28
     74a:	11 96       	adiw	r26, 0x01	; 1
     74c:	01 90       	ld	r0, Z+
     74e:	0d 92       	st	X+, r0
     750:	8a 95       	dec	r24
     752:	e1 f7       	brne	.-8      	; 0x74c <lq_init+0xf2>
     754:	29 81       	ldd	r18, Y+1	; 0x01
     756:	3a 81       	ldd	r19, Y+2	; 0x02
     758:	4b 81       	ldd	r20, Y+3	; 0x03
     75a:	5c 81       	ldd	r21, Y+4	; 0x04
     75c:	6d 81       	ldd	r22, Y+5	; 0x05
     75e:	7e 81       	ldd	r23, Y+6	; 0x06
};
     760:	8f 81       	ldd	r24, Y+7	; 0x07
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	2e 96       	adiw	r28, 0x0e	; 14
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	f8 94       	cli
     76a:	de bf       	out	0x3e, r29	; 62
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	cd bf       	out	0x3d, r28	; 61
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	08 95       	ret

00000776 <openTrash>:
//if (TrashCompleteOpen==true){isMotorWorking=false;}
//else{isMotorWorking=true}

//===================

void openTrash() {
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
	// Code to open the curtain
	for (int i = 0; i < 5; i++) {
     77a:	c0 e0       	ldi	r28, 0x00	; 0
     77c:	d0 e0       	ldi	r29, 0x00	; 0
     77e:	25 c0       	rjmp	.+74     	; 0x7ca <openTrash+0x54>
		PORTA = 0x04;
     780:	84 e0       	ldi	r24, 0x04	; 4
     782:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     784:	8f e4       	ldi	r24, 0x4F	; 79
     786:	93 ec       	ldi	r25, 0xC3	; 195
     788:	01 97       	sbiw	r24, 0x01	; 1
     78a:	f1 f7       	brne	.-4      	; 0x788 <openTrash+0x12>
     78c:	00 c0       	rjmp	.+0      	; 0x78e <openTrash+0x18>
     78e:	00 00       	nop
		_delay_ms(200);
		PORTA = 0x02;
     790:	82 e0       	ldi	r24, 0x02	; 2
     792:	8b bb       	out	0x1b, r24	; 27
     794:	8f e4       	ldi	r24, 0x4F	; 79
     796:	93 ec       	ldi	r25, 0xC3	; 195
     798:	01 97       	sbiw	r24, 0x01	; 1
     79a:	f1 f7       	brne	.-4      	; 0x798 <openTrash+0x22>
     79c:	00 c0       	rjmp	.+0      	; 0x79e <openTrash+0x28>
     79e:	00 00       	nop
		_delay_ms(200);
		PORTA = 0x08;
     7a0:	88 e0       	ldi	r24, 0x08	; 8
     7a2:	8b bb       	out	0x1b, r24	; 27
     7a4:	8f e4       	ldi	r24, 0x4F	; 79
     7a6:	93 ec       	ldi	r25, 0xC3	; 195
     7a8:	01 97       	sbiw	r24, 0x01	; 1
     7aa:	f1 f7       	brne	.-4      	; 0x7a8 <openTrash+0x32>
     7ac:	00 c0       	rjmp	.+0      	; 0x7ae <openTrash+0x38>
     7ae:	00 00       	nop
		_delay_ms(200);
		PORTA = 0x01;
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	8b bb       	out	0x1b, r24	; 27
     7b4:	8f e4       	ldi	r24, 0x4F	; 79
     7b6:	93 ec       	ldi	r25, 0xC3	; 195
     7b8:	01 97       	sbiw	r24, 0x01	; 1
     7ba:	f1 f7       	brne	.-4      	; 0x7b8 <openTrash+0x42>
     7bc:	00 c0       	rjmp	.+0      	; 0x7be <openTrash+0x48>
     7be:	00 00       	nop
		_delay_ms(200);
		serial_send_string(" opening...\r");
     7c0:	8b e6       	ldi	r24, 0x6B	; 107
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 b2 06 	call	0xd64	; 0xd64 <serial_send_string>

//===================

void openTrash() {
	// Code to open the curtain
	for (int i = 0; i < 5; i++) {
     7c8:	21 96       	adiw	r28, 0x01	; 1
     7ca:	c5 30       	cpi	r28, 0x05	; 5
     7cc:	d1 05       	cpc	r29, r1
     7ce:	c4 f2       	brlt	.-80     	; 0x780 <openTrash+0xa>
		PORTA = 0x01;
		_delay_ms(200);
		serial_send_string(" opening...\r");

	}
	isTrashCompleteOpen = true;
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <isTrashCompleteOpen>
	isMotorWorking = false;
     7d6:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <isMotorWorking>
}
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	08 95       	ret

000007e0 <closeTrash>:

void closeTrash() {
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
	// Code to close the curtain
	for (int i = 0; i < 5; i++) {
     7e4:	c0 e0       	ldi	r28, 0x00	; 0
     7e6:	d0 e0       	ldi	r29, 0x00	; 0
     7e8:	25 c0       	rjmp	.+74     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
		PORTA = 0x01;
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	8b bb       	out	0x1b, r24	; 27
     7ee:	8f e4       	ldi	r24, 0x4F	; 79
     7f0:	93 ec       	ldi	r25, 0xC3	; 195
     7f2:	01 97       	sbiw	r24, 0x01	; 1
     7f4:	f1 f7       	brne	.-4      	; 0x7f2 <closeTrash+0x12>
     7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <closeTrash+0x18>
     7f8:	00 00       	nop
		_delay_ms(200);
		PORTA = 0x08;
     7fa:	88 e0       	ldi	r24, 0x08	; 8
     7fc:	8b bb       	out	0x1b, r24	; 27
     7fe:	8f e4       	ldi	r24, 0x4F	; 79
     800:	93 ec       	ldi	r25, 0xC3	; 195
     802:	01 97       	sbiw	r24, 0x01	; 1
     804:	f1 f7       	brne	.-4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     806:	00 c0       	rjmp	.+0      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     808:	00 00       	nop
		_delay_ms(200);
		PORTA = 0x02;
     80a:	82 e0       	ldi	r24, 0x02	; 2
     80c:	8b bb       	out	0x1b, r24	; 27
     80e:	8f e4       	ldi	r24, 0x4F	; 79
     810:	93 ec       	ldi	r25, 0xC3	; 195
     812:	01 97       	sbiw	r24, 0x01	; 1
     814:	f1 f7       	brne	.-4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     816:	00 c0       	rjmp	.+0      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     818:	00 00       	nop
		_delay_ms(200);
		PORTA = 0x04;
     81a:	84 e0       	ldi	r24, 0x04	; 4
     81c:	8b bb       	out	0x1b, r24	; 27
     81e:	8f e4       	ldi	r24, 0x4F	; 79
     820:	93 ec       	ldi	r25, 0xC3	; 195
     822:	01 97       	sbiw	r24, 0x01	; 1
     824:	f1 f7       	brne	.-4      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     826:	00 c0       	rjmp	.+0      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     828:	00 00       	nop
		_delay_ms(200);
		serial_send_string(" closing...\r");
     82a:	88 e7       	ldi	r24, 0x78	; 120
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	0e 94 b2 06 	call	0xd64	; 0xd64 <serial_send_string>
	isMotorWorking = false;
}

void closeTrash() {
	// Code to close the curtain
	for (int i = 0; i < 5; i++) {
     832:	21 96       	adiw	r28, 0x01	; 1
     834:	c5 30       	cpi	r28, 0x05	; 5
     836:	d1 05       	cpc	r29, r1
     838:	c4 f2       	brlt	.-80     	; 0x7ea <closeTrash+0xa>
		PORTA = 0x04;
		_delay_ms(200);
		serial_send_string(" closing...\r");

	}
	isTrashCompleteColse = true;
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <isTrashCompleteColse>
	isMotorWorking = false;
     840:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <isMotorWorking>
}
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
     848:	08 95       	ret

0000084a <initBuzzer>:

//===================

void initBuzzer() {
	// Initialize buzzer pin as output
	DDRD |= (1 << BUZZER_PIN);
     84a:	81 b3       	in	r24, 0x11	; 17
     84c:	80 68       	ori	r24, 0x80	; 128
     84e:	81 bb       	out	0x11, r24	; 17
     850:	08 95       	ret

00000852 <turnOnBuzzer>:
}

void turnOnBuzzer() {
	PORTD |= (1 << BUZZER_PIN); // Set the pin high to turn on the buzzer
     852:	82 b3       	in	r24, 0x12	; 18
     854:	80 68       	ori	r24, 0x80	; 128
     856:	82 bb       	out	0x12, r24	; 18
     858:	08 95       	ret

0000085a <turnOffBuzzer>:
}

void turnOffBuzzer() {
	PORTD &= ~(1 << BUZZER_PIN); // Set the pin low to turn off the buzzer
     85a:	82 b3       	in	r24, 0x12	; 18
     85c:	8f 77       	andi	r24, 0x7F	; 127
     85e:	82 bb       	out	0x12, r24	; 18
     860:	08 95       	ret

00000862 <initClock>:
}

//===================

void initClock() {
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	cd b7       	in	r28, 0x3d	; 61
     868:	de b7       	in	r29, 0x3e	; 62
     86a:	28 97       	sbiw	r28, 0x08	; 8
     86c:	0f b6       	in	r0, 0x3f	; 63
     86e:	f8 94       	cli
     870:	de bf       	out	0x3e, r29	; 62
     872:	0f be       	out	0x3f, r0	; 63
     874:	cd bf       	out	0x3d, r28	; 61
	t.Minute = 59;
	t.Hour = 18;
	t.Day = Sunday;
	t.Date = 29;
	t.Month = June;
	t.Year = 2025;
     876:	89 ee       	ldi	r24, 0xE9	; 233
     878:	97 e0       	ldi	r25, 0x07	; 7
	RTC_Set(t);
     87a:	29 e3       	ldi	r18, 0x39	; 57
     87c:	3b e3       	ldi	r19, 0x3B	; 59
     87e:	42 e1       	ldi	r20, 0x12	; 18
     880:	52 e0       	ldi	r21, 0x02	; 2
     882:	6d e1       	ldi	r22, 0x1D	; 29
     884:	76 e0       	ldi	r23, 0x06	; 6
     886:	0e 94 33 01 	call	0x266	; 0x266 <RTC_Set>

}
     88a:	28 96       	adiw	r28, 0x08	; 8
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	f8 94       	cli
     890:	de bf       	out	0x3e, r29	; 62
     892:	0f be       	out	0x3f, r0	; 63
     894:	cd bf       	out	0x3d, r28	; 61
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	08 95       	ret

0000089c <setupAlarm>:

void setupAlarm() {
     89c:	0f 93       	push	r16
	uint8_t alarmHours = 19;   // 24-hour format
	uint8_t alarmMinutes = 0;
	uint8_t alarmSeconds = 0;

	// Set the alarm to trigger every day at the specified time
	RTC_AlarmSet(Alarm1_Match_Hours, 0, alarmHours, alarmMinutes, alarmSeconds);
     89e:	00 e0       	ldi	r16, 0x00	; 0
     8a0:	20 e0       	ldi	r18, 0x00	; 0
     8a2:	43 e1       	ldi	r20, 0x13	; 19
     8a4:	60 e0       	ldi	r22, 0x00	; 0
     8a6:	88 e0       	ldi	r24, 0x08	; 8
     8a8:	0e 94 df 01 	call	0x3be	; 0x3be <RTC_AlarmSet>
}
     8ac:	0f 91       	pop	r16
     8ae:	08 95       	ret

000008b0 <sensorInit>:

//=============================================
void sensorInit() {
	// Set TRIGGER_PIN as output and ECHO_PIN as input
	DDRB |= (1 << TRIG_PIN); // Set TRIGGER_PIN as output
     8b0:	87 b3       	in	r24, 0x17	; 23
     8b2:	82 60       	ori	r24, 0x02	; 2
     8b4:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << ECHO_PIN);   // Set ECHO_PIN as input
     8b6:	87 b3       	in	r24, 0x17	; 23
     8b8:	8e 7f       	andi	r24, 0xFE	; 254
     8ba:	87 bb       	out	0x17, r24	; 23
	// Enable pull-up resistor for ECHO_PIN
	PORTB |= (1 << ECHO_PIN);
     8bc:	88 b3       	in	r24, 0x18	; 24
     8be:	81 60       	ori	r24, 0x01	; 1
     8c0:	88 bb       	out	0x18, r24	; 24
     8c2:	08 95       	ret

000008c4 <init>:
}

void init(){
	initClock();
     8c4:	0e 94 31 04 	call	0x862	; 0x862 <initClock>
	setupAlarm();
     8c8:	0e 94 4e 04 	call	0x89c	; 0x89c <setupAlarm>
	initBuzzer();
     8cc:	0e 94 25 04 	call	0x84a	; 0x84a <initBuzzer>
	sensorInit();
     8d0:	0e 94 58 04 	call	0x8b0	; 0x8b0 <sensorInit>
	DDRD |= (1 << BUZZER_PIN);  //buzzer init
     8d4:	81 b3       	in	r24, 0x11	; 17
     8d6:	80 68       	ori	r24, 0x80	; 128
     8d8:	81 bb       	out	0x11, r24	; 17
	DDRA |= (1 << 0) | (1 << 1) | (1 << 2) | (1 << 3);// motor init
     8da:	8a b3       	in	r24, 0x1a	; 26
     8dc:	8f 60       	ori	r24, 0x0F	; 15
     8de:	8a bb       	out	0x1a, r24	; 26
	i2c_master_init(I2C_SCL_FREQUENCY_400);
     8e0:	60 e8       	ldi	r22, 0x80	; 128
     8e2:	7a e1       	ldi	r23, 0x1A	; 26
     8e4:	86 e0       	ldi	r24, 0x06	; 6
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0e 94 26 02 	call	0x44c	; 0x44c <i2c_master_init>
	lcd1 = lq_init(0x27, 16, 2, LCD_5x8DOTS);
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	42 e0       	ldi	r20, 0x02	; 2
     8f0:	60 e1       	ldi	r22, 0x10	; 16
     8f2:	87 e2       	ldi	r24, 0x27	; 39
     8f4:	0e 94 2d 03 	call	0x65a	; 0x65a <lq_init>
     8f8:	20 93 fb 00 	sts	0x00FB, r18	; 0x8000fb <lcd1>
     8fc:	30 93 fc 00 	sts	0x00FC, r19	; 0x8000fc <lcd1+0x1>
     900:	40 93 fd 00 	sts	0x00FD, r20	; 0x8000fd <lcd1+0x2>
     904:	50 93 fe 00 	sts	0x00FE, r21	; 0x8000fe <lcd1+0x3>
     908:	60 93 ff 00 	sts	0x00FF, r22	; 0x8000ff <lcd1+0x4>
     90c:	70 93 00 01 	sts	0x0100, r23	; 0x800100 <lcd1+0x5>
     910:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <lcd1+0x6>
	cli(); // Disable interrupts during timer setup
     914:	f8 94       	cli
	TIMSK |= (1 << TOIE0);
     916:	89 b7       	in	r24, 0x39	; 57
     918:	81 60       	ori	r24, 0x01	; 1
     91a:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 5; // Timer start
     91c:	85 e0       	ldi	r24, 0x05	; 5
     91e:	82 bf       	out	0x32, r24	; 50
	TCCR0 = (1 << CS02) | (1 << CS00); // 101: Prescaler = 1024
     920:	83 bf       	out	0x33, r24	; 51
	sei(); // Enable interrupts after timer setup
     922:	78 94       	sei
	serial_init();
     924:	0e 94 a1 06 	call	0xd42	; 0xd42 <serial_init>
	serial_send_string(" Enter timer command: "); // Look at how \r works
     928:	85 e8       	ldi	r24, 0x85	; 133
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	0e 94 b2 06 	call	0xd64	; 0xd64 <serial_send_string>
     930:	08 95       	ret

00000932 <sendTriggerPulse>:
}
//======================

void sendTriggerPulse() {
	// Generate a pulse on TRIGGER_PIN to trigger the ultrasonic sensor
	PORTA |= (1 << TRIG_PIN); // Set TRIGGER_PIN high
     932:	8b b3       	in	r24, 0x1b	; 27
     934:	82 60       	ori	r24, 0x02	; 2
     936:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     938:	83 e0       	ldi	r24, 0x03	; 3
     93a:	8a 95       	dec	r24
     93c:	f1 f7       	brne	.-4      	; 0x93a <sendTriggerPulse+0x8>
     93e:	00 00       	nop
	_delay_us(10);               // Wait for a short duration
	PORTA &= ~(1 << TRIG_PIN);// Set TRIGGER_PIN low
     940:	8b b3       	in	r24, 0x1b	; 27
     942:	8d 7f       	andi	r24, 0xFD	; 253
     944:	8b bb       	out	0x1b, r24	; 27
     946:	08 95       	ret

00000948 <calculateDistance>:
}

float calculateDistance() {
	// Measure the duration of the pulse on the ECHO_PIN
	while (!(PINA & (1 << ECHO_PIN))) {
     948:	c8 9b       	sbis	0x19, 0	; 25
     94a:	fe cf       	rjmp	.-4      	; 0x948 <calculateDistance>
		// Wait for the pulse to start
	}
	
	// Record the start time
	echoStartTime = TCNT0;
     94c:	82 b7       	in	r24, 0x32	; 50
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <echoStartTime+0x1>
     954:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <echoStartTime>
	
	while (PINA & (1 << ECHO_PIN)) {
     958:	c8 99       	sbic	0x19, 0	; 25
     95a:	fe cf       	rjmp	.-4      	; 0x958 <calculateDistance+0x10>
		// Wait for the pulse to end
	}
	
	// Record the end time
	echoEndTime = TCNT0;
     95c:	82 b7       	in	r24, 0x32	; 50
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <echoEndTime+0x1>
     964:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <echoEndTime>
	
	// Calculate the duration of the pulse
	uint16_t echoDuration = echoEndTime - echoStartTime;
     968:	60 91 e1 00 	lds	r22, 0x00E1	; 0x8000e1 <echoEndTime>
     96c:	70 91 e2 00 	lds	r23, 0x00E2	; 0x8000e2 <echoEndTime+0x1>
     970:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <echoStartTime>
     974:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <echoStartTime+0x1>
     978:	68 1b       	sub	r22, r24
     97a:	79 0b       	sbc	r23, r25
	
	// Convert the duration to distance using the speed of sound
	// Speed of sound = 34300 cm/s (for air at room temperature)
	// Distance = (duration / 2) * speed of sound
	float distance = (echoDuration * 0.01715); // 0.01715 = 34300 cm/s / 2
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__floatunsisf>
     984:	28 e2       	ldi	r18, 0x28	; 40
     986:	3e e7       	ldi	r19, 0x7E	; 126
     988:	4c e8       	ldi	r20, 0x8C	; 140
     98a:	5c e3       	ldi	r21, 0x3C	; 60
     98c:	0e 94 4d 07 	call	0xe9a	; 0xe9a <__mulsf3>
	
	return distance;
}
     990:	08 95       	ret

00000992 <main>:
	}
}

int main(void) {

	init();
     992:	0e 94 62 04 	call	0x8c4	; 0x8c4 <init>
	while (1) {
		//motor process
		if (isMotorWorking) {
     996:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <isMotorWorking>
     99a:	88 23       	and	r24, r24
     99c:	71 f0       	breq	.+28     	; 0x9ba <main+0x28>
			if (isTrashOpen) {
     99e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <isTrashOpen>
     9a2:	88 23       	and	r24, r24
     9a4:	19 f0       	breq	.+6      	; 0x9ac <main+0x1a>
				openTrash();
     9a6:	0e 94 bb 03 	call	0x776	; 0x776 <openTrash>
     9aa:	07 c0       	rjmp	.+14     	; 0x9ba <main+0x28>
				} else if (!isTrashOpen && isInAutomaticMode) {
     9ac:	81 11       	cpse	r24, r1
     9ae:	05 c0       	rjmp	.+10     	; 0x9ba <main+0x28>
     9b0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <isInAutomaticMode>
     9b4:	81 11       	cpse	r24, r1
				closeTrash();
     9b6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <closeTrash>
			}
		}
		
		// alarm process
		if(buzzerOn){
     9ba:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <buzzerOn>
     9be:	81 11       	cpse	r24, r1
			turnOnBuzzer();
     9c0:	0e 94 29 04 	call	0x852	; 0x852 <turnOnBuzzer>
		}
		if(!buzzerOn){
     9c4:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <buzzerOn>
     9c8:	81 11       	cpse	r24, r1
     9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <main+0x3e>
			turnOffBuzzer();
     9cc:	0e 94 2d 04 	call	0x85a	; 0x85a <turnOffBuzzer>
		}
		if (measurementFlag) {
     9d0:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <measurementFlag>
     9d4:	88 23       	and	r24, r24
     9d6:	f9 f2       	breq	.-66     	; 0x996 <main+0x4>
			measurementFlag = false;
     9d8:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <measurementFlag>
			
			sendTriggerPulse();
     9dc:	0e 94 99 04 	call	0x932	; 0x932 <sendTriggerPulse>
			
			// Calculate distance and set objectDetected flag
			float distance = calculateDistance();
     9e0:	0e 94 a4 04 	call	0x948	; 0x948 <calculateDistance>
			
			if (distance < Desired_Distance) {
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	40 ea       	ldi	r20, 0xA0	; 160
     9ea:	51 e4       	ldi	r21, 0x41	; 65
     9ec:	0e 94 e7 06 	call	0xdce	; 0xdce <__cmpsf2>
     9f0:	88 23       	and	r24, r24
     9f2:	24 f4       	brge	.+8      	; 0x9fc <main+0x6a>
				isObjectDetected = true;
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <isObjectDetected>
     9fa:	cd cf       	rjmp	.-102    	; 0x996 <main+0x4>
				} else {
				isObjectDetected = false;
     9fc:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <isObjectDetected>
     a00:	ca cf       	rjmp	.-108    	; 0x996 <main+0x4>

00000a02 <printClock>:
}


//=====================

void printClock() {
     a02:	ef 92       	push	r14
     a04:	ff 92       	push	r15
     a06:	0f 93       	push	r16
     a08:	1f 93       	push	r17
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	cd b7       	in	r28, 0x3d	; 61
     a10:	de b7       	in	r29, 0x3e	; 62
     a12:	64 97       	sbiw	r28, 0x14	; 20
     a14:	0f b6       	in	r0, 0x3f	; 63
     a16:	f8 94       	cli
     a18:	de bf       	out	0x3e, r29	; 62
     a1a:	0f be       	out	0x3f, r0	; 63
     a1c:	cd bf       	out	0x3d, r28	; 61
	// Print time on LCD
	t = RTC_Get();
     a1e:	0e 94 87 01 	call	0x30e	; 0x30e <RTC_Get>
     a22:	e3 ef       	ldi	r30, 0xF3	; 243
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	20 83       	st	Z, r18
     a28:	31 83       	std	Z+1, r19	; 0x01
     a2a:	42 83       	std	Z+2, r20	; 0x02
     a2c:	53 83       	std	Z+3, r21	; 0x03
     a2e:	64 83       	std	Z+4, r22	; 0x04
     a30:	75 83       	std	Z+5, r23	; 0x05
     a32:	86 83       	std	Z+6, r24	; 0x06
     a34:	97 83       	std	Z+7, r25	; 0x07
	if (RTC_Status() == RTC_OK) {
     a36:	0e 94 64 00 	call	0xc8	; 0xc8 <RTC_Status>
     a3a:	81 30       	cpi	r24, 0x01	; 1
     a3c:	09 f0       	breq	.+2      	; 0xa40 <printClock+0x3e>
     a3e:	49 c0       	rjmp	.+146    	; 0xad2 <printClock+0xd0>
		// Print time on lcd
		lq_setCursor(&lcd1, 0, 0);
     a40:	40 e0       	ldi	r20, 0x00	; 0
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	8b ef       	ldi	r24, 0xFB	; 251
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	0e 94 e7 02 	call	0x5ce	; 0x5ce <lq_setCursor>
		char timeArr[10];
		sprintf(timeArr, "%02d:%02d:%02d", t.Hour, t.Minute, t.Second); // Google about sprintf()
     a4c:	03 ef       	ldi	r16, 0xF3	; 243
     a4e:	10 e0       	ldi	r17, 0x00	; 0
     a50:	f8 01       	movw	r30, r16
     a52:	20 81       	ld	r18, Z
     a54:	91 81       	ldd	r25, Z+1	; 0x01
     a56:	82 81       	ldd	r24, Z+2	; 0x02
     a58:	1f 92       	push	r1
     a5a:	2f 93       	push	r18
     a5c:	1f 92       	push	r1
     a5e:	9f 93       	push	r25
     a60:	1f 92       	push	r1
     a62:	8f 93       	push	r24
     a64:	8c e9       	ldi	r24, 0x9C	; 156
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	9f 93       	push	r25
     a6a:	8f 93       	push	r24
     a6c:	7e 01       	movw	r14, r28
     a6e:	fb e0       	ldi	r31, 0x0B	; 11
     a70:	ef 0e       	add	r14, r31
     a72:	f1 1c       	adc	r15, r1
     a74:	ff 92       	push	r15
     a76:	ef 92       	push	r14
     a78:	0e 94 47 08 	call	0x108e	; 0x108e <sprintf>
		// Also change "%d:%d:%d" to "%02d:%02d:%02d" and see what happens for 1 digit numbers
		lq_print(&lcd1, timeArr);
     a7c:	b7 01       	movw	r22, r14
     a7e:	8b ef       	ldi	r24, 0xFB	; 251
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	0e 94 ce 02 	call	0x59c	; 0x59c <lq_print>

		// Print date on lcd
		lq_setCursor(&lcd1, 1, 0);
     a86:	40 e0       	ldi	r20, 0x00	; 0
     a88:	61 e0       	ldi	r22, 0x01	; 1
     a8a:	8b ef       	ldi	r24, 0xFB	; 251
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <lq_setCursor>
		char dateArr[10];
		sprintf(dateArr, "%02d/%02d/%02d", t.Year, t.Month, t.Date);
     a92:	f8 01       	movw	r30, r16
     a94:	94 81       	ldd	r25, Z+4	; 0x04
     a96:	85 81       	ldd	r24, Z+5	; 0x05
     a98:	1f 92       	push	r1
     a9a:	9f 93       	push	r25
     a9c:	1f 92       	push	r1
     a9e:	8f 93       	push	r24
     aa0:	87 81       	ldd	r24, Z+7	; 0x07
     aa2:	8f 93       	push	r24
     aa4:	86 81       	ldd	r24, Z+6	; 0x06
     aa6:	8f 93       	push	r24
     aa8:	8b ea       	ldi	r24, 0xAB	; 171
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	9f 93       	push	r25
     aae:	8f 93       	push	r24
     ab0:	8e 01       	movw	r16, r28
     ab2:	0f 5f       	subi	r16, 0xFF	; 255
     ab4:	1f 4f       	sbci	r17, 0xFF	; 255
     ab6:	1f 93       	push	r17
     ab8:	0f 93       	push	r16
     aba:	0e 94 47 08 	call	0x108e	; 0x108e <sprintf>
		lq_print(&lcd1, dateArr);
     abe:	b8 01       	movw	r22, r16
     ac0:	8b ef       	ldi	r24, 0xFB	; 251
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0e 94 ce 02 	call	0x59c	; 0x59c <lq_print>
     ac8:	0f b6       	in	r0, 0x3f	; 63
     aca:	f8 94       	cli
     acc:	de bf       	out	0x3e, r29	; 62
     ace:	0f be       	out	0x3f, r0	; 63
     ad0:	cd bf       	out	0x3d, r28	; 61
	}
}
     ad2:	64 96       	adiw	r28, 0x14	; 20
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	f8 94       	cli
     ad8:	de bf       	out	0x3e, r29	; 62
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	cd bf       	out	0x3d, r28	; 61
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	08 95       	ret

00000aec <__vector_11>:
		memset(receivedString, 0, sizeof(receivedString));
	}
}
#endif

ISR(TIMER0_OVF_vect) { // Timer0 overflow interrupt
     aec:	1f 92       	push	r1
     aee:	0f 92       	push	r0
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	0f 92       	push	r0
     af4:	11 24       	eor	r1, r1
     af6:	2f 93       	push	r18
     af8:	3f 93       	push	r19
     afa:	4f 93       	push	r20
     afc:	5f 93       	push	r21
     afe:	6f 93       	push	r22
     b00:	7f 93       	push	r23
     b02:	8f 93       	push	r24
     b04:	9f 93       	push	r25
     b06:	af 93       	push	r26
     b08:	bf 93       	push	r27
     b0a:	ef 93       	push	r30
     b0c:	ff 93       	push	r31
	TCNT0 = 6;
     b0e:	86 e0       	ldi	r24, 0x06	; 6
     b10:	82 bf       	out	0x32, r24	; 50
	TIFR |= (1 << TOV0);
     b12:	88 b7       	in	r24, 0x38	; 56
     b14:	81 60       	ori	r24, 0x01	; 1
     b16:	88 bf       	out	0x38, r24	; 56
	printClock();
     b18:	0e 94 01 05 	call	0xa02	; 0xa02 <printClock>
	distanceTimeCounter++;
     b1c:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__data_end>
     b20:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <__data_end+0x1>
     b24:	01 96       	adiw	r24, 0x01	; 1
     b26:	90 93 db 00 	sts	0x00DB, r25	; 0x8000db <__data_end+0x1>
     b2a:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__data_end>
	//=========
	//buzzer

	if (buzzerOn){
     b2e:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <buzzerOn>
     b32:	88 23       	and	r24, r24
     b34:	51 f0       	breq	.+20     	; 0xb4a <__vector_11+0x5e>
		timeCounter++;
     b36:	20 91 de 00 	lds	r18, 0x00DE	; 0x8000de <timeCounter>
     b3a:	30 91 df 00 	lds	r19, 0x00DF	; 0x8000df <timeCounter+0x1>
     b3e:	2f 5f       	subi	r18, 0xFF	; 255
     b40:	3f 4f       	sbci	r19, 0xFF	; 255
     b42:	30 93 df 00 	sts	0x00DF, r19	; 0x8000df <timeCounter+0x1>
     b46:	20 93 de 00 	sts	0x00DE, r18	; 0x8000de <timeCounter>
	}
	if (timeCounter == 33 && buzzerOn) { // Adjusted for approximately 33 for 1 sec
     b4a:	20 91 de 00 	lds	r18, 0x00DE	; 0x8000de <timeCounter>
     b4e:	30 91 df 00 	lds	r19, 0x00DF	; 0x8000df <timeCounter+0x1>
     b52:	21 32       	cpi	r18, 0x21	; 33
     b54:	31 05       	cpc	r19, r1
     b56:	51 f4       	brne	.+20     	; 0xb6c <__vector_11+0x80>
     b58:	88 23       	and	r24, r24
     b5a:	41 f0       	breq	.+16     	; 0xb6c <__vector_11+0x80>
		//turn off buzzer after 1 sec
		timeCounter = 0;
     b5c:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <timeCounter+0x1>
     b60:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <timeCounter>
		TCNT0 = 6;
     b64:	86 e0       	ldi	r24, 0x06	; 6
     b66:	82 bf       	out	0x32, r24	; 50
		buzzerOn=false;
     b68:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <buzzerOn>
	}
	//========
	//sensor
	if(isObjectDetected){
     b6c:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <isObjectDetected>
     b70:	88 23       	and	r24, r24
     b72:	51 f0       	breq	.+20     	; 0xb88 <__vector_11+0x9c>
		trashOpentimeCounter++;
     b74:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <trashOpentimeCounter>
     b78:	30 91 dd 00 	lds	r19, 0x00DD	; 0x8000dd <trashOpentimeCounter+0x1>
     b7c:	2f 5f       	subi	r18, 0xFF	; 255
     b7e:	3f 4f       	sbci	r19, 0xFF	; 255
     b80:	30 93 dd 00 	sts	0x00DD, r19	; 0x8000dd <trashOpentimeCounter+0x1>
     b84:	20 93 dc 00 	sts	0x00DC, r18	; 0x8000dc <trashOpentimeCounter>
	}

	if (timeCounter == 325 && isObjectDetected) { // Adjusted for approximately 325 for 10 sec
     b88:	20 91 de 00 	lds	r18, 0x00DE	; 0x8000de <timeCounter>
     b8c:	30 91 df 00 	lds	r19, 0x00DF	; 0x8000df <timeCounter+0x1>
     b90:	25 34       	cpi	r18, 0x45	; 69
     b92:	31 40       	sbci	r19, 0x01	; 1
     b94:	89 f4       	brne	.+34     	; 0xbb8 <__vector_11+0xcc>
     b96:	88 23       	and	r24, r24
     b98:	79 f0       	breq	.+30     	; 0xbb8 <__vector_11+0xcc>
		// closing trash after 10s
		trashOpentimeCounter = 0;
     b9a:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <trashOpentimeCounter+0x1>
     b9e:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <trashOpentimeCounter>
		TCNT0 = 6;
     ba2:	86 e0       	ldi	r24, 0x06	; 6
     ba4:	82 bf       	out	0x32, r24	; 50
		isObjectDetected=false;
     ba6:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <isObjectDetected>
		isTrashOpen=false;
     baa:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <isTrashOpen>
		isTrashCompleteOpen=false;
     bae:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <isTrashCompleteOpen>
		isMotorWorking=true;
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <isMotorWorking>
	}
	if(distanceTimeCounter==16 && !measurementFlag){
     bb8:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__data_end>
     bbc:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <__data_end+0x1>
     bc0:	40 97       	sbiw	r24, 0x10	; 16
     bc2:	59 f4       	brne	.+22     	; 0xbda <__vector_11+0xee>
     bc4:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <measurementFlag>
     bc8:	81 11       	cpse	r24, r1
     bca:	07 c0       	rjmp	.+14     	; 0xbda <__vector_11+0xee>
		distanceTimeCounter=0;
     bcc:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <__data_end+0x1>
     bd0:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__data_end>
		measurementFlag=true;
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <measurementFlag>
	}
}
     bda:	ff 91       	pop	r31
     bdc:	ef 91       	pop	r30
     bde:	bf 91       	pop	r27
     be0:	af 91       	pop	r26
     be2:	9f 91       	pop	r25
     be4:	8f 91       	pop	r24
     be6:	7f 91       	pop	r23
     be8:	6f 91       	pop	r22
     bea:	5f 91       	pop	r21
     bec:	4f 91       	pop	r20
     bee:	3f 91       	pop	r19
     bf0:	2f 91       	pop	r18
     bf2:	0f 90       	pop	r0
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	0f 90       	pop	r0
     bf8:	1f 90       	pop	r1
     bfa:	18 95       	reti

00000bfc <setTimeFromReceivedString>:
		sprintf(dateArr, "%02d/%02d/%02d", t.Year, t.Month, t.Date);
		lq_print(&lcd1, dateArr);
	}
}

void setTimeFromReceivedString(const char* str) {
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	a3 97       	sbiw	r28, 0x23	; 35
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	f8 94       	cli
     c0a:	de bf       	out	0x3e, r29	; 62
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	cd bf       	out	0x3d, r28	; 61
	// 	serial_send_string(str);
	char formatString[] = "set time %d:%d:%d %d/%d/%d";
     c10:	4b e1       	ldi	r20, 0x1B	; 27
     c12:	ea eb       	ldi	r30, 0xBA	; 186
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	9e 01       	movw	r18, r28
     c18:	2f 5f       	subi	r18, 0xFF	; 255
     c1a:	3f 4f       	sbci	r19, 0xFF	; 255
     c1c:	d9 01       	movw	r26, r18
     c1e:	01 90       	ld	r0, Z+
     c20:	0d 92       	st	X+, r0
     c22:	4a 95       	dec	r20
     c24:	e1 f7       	brne	.-8      	; 0xc1e <setTimeFromReceivedString+0x22>
	// Extract the values from the received string
	DateTime_t t1 ;
	sscanf(str, formatString, &t1.Hour, &t1.Minute, &t1.Second, &t1.Month, &t1.Date, &t1.Year);
     c26:	ae 01       	movw	r20, r28
     c28:	44 5e       	subi	r20, 0xE4	; 228
     c2a:	5f 4f       	sbci	r21, 0xFF	; 255
     c2c:	be 01       	movw	r22, r28
     c2e:	6e 5d       	subi	r22, 0xDE	; 222
     c30:	7f 4f       	sbci	r23, 0xFF	; 255
     c32:	7f 93       	push	r23
     c34:	6f 93       	push	r22
     c36:	62 50       	subi	r22, 0x02	; 2
     c38:	71 09       	sbc	r23, r1
     c3a:	7f 93       	push	r23
     c3c:	6f 93       	push	r22
     c3e:	6f 5f       	subi	r22, 0xFF	; 255
     c40:	7f 4f       	sbci	r23, 0xFF	; 255
     c42:	7f 93       	push	r23
     c44:	6f 93       	push	r22
     c46:	5f 93       	push	r21
     c48:	4f 93       	push	r20
     c4a:	4f 5f       	subi	r20, 0xFF	; 255
     c4c:	5f 4f       	sbci	r21, 0xFF	; 255
     c4e:	5f 93       	push	r21
     c50:	4f 93       	push	r20
     c52:	4f 5f       	subi	r20, 0xFF	; 255
     c54:	5f 4f       	sbci	r21, 0xFF	; 255
     c56:	5f 93       	push	r21
     c58:	4f 93       	push	r20
     c5a:	3f 93       	push	r19
     c5c:	2f 93       	push	r18
     c5e:	9f 93       	push	r25
     c60:	8f 93       	push	r24
     c62:	0e 94 69 08 	call	0x10d2	; 0x10d2 <sscanf>
	// 	char numarr[50];
	// 	sprintf(numarr,"%02d:%02d:%02d %02d/%02d/%02d",t1.Hour,t1.Minute,t1.Second, t1.Month, t1.Date, t1.Year);
	// 	serial_send_string(numarr);
	RTC_Set(t1);
     c66:	2c 8d       	ldd	r18, Y+28	; 0x1c
     c68:	3d 8d       	ldd	r19, Y+29	; 0x1d
     c6a:	4e 8d       	ldd	r20, Y+30	; 0x1e
     c6c:	5f 8d       	ldd	r21, Y+31	; 0x1f
     c6e:	68 a1       	ldd	r22, Y+32	; 0x20
     c70:	79 a1       	ldd	r23, Y+33	; 0x21
     c72:	8a a1       	ldd	r24, Y+34	; 0x22
     c74:	9b a1       	ldd	r25, Y+35	; 0x23
     c76:	0e 94 33 01 	call	0x266	; 0x266 <RTC_Set>
}
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	f8 94       	cli
     c7e:	de bf       	out	0x3e, r29	; 62
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	cd bf       	out	0x3d, r28	; 61
     c84:	a3 96       	adiw	r28, 0x23	; 35
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	de bf       	out	0x3e, r29	; 62
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	cd bf       	out	0x3d, r28	; 61
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	08 95       	ret

00000c96 <processCommand>:

int processCommand(char* str) {
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	ec 01       	movw	r28, r24
	if (strstr(str, setTimeCommand) != NULL) {
     c9c:	61 e6       	ldi	r22, 0x61	; 97
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	0e 94 2d 08 	call	0x105a	; 0x105a <strstr>
     ca4:	89 2b       	or	r24, r25
     ca6:	19 f0       	breq	.+6      	; 0xcae <processCommand+0x18>
		setTimeFromReceivedString(str);
     ca8:	ce 01       	movw	r24, r28
     caa:	0e 94 fe 05 	call	0xbfc	; 0xbfc <setTimeFromReceivedString>
	}
	return 0;
}
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	08 95       	ret

00000cb8 <__vector_13>:
int  processCommand();
float calculateDistance();
void sendTriggerPulse();

#if SERIAL_INTERRUPT == 1
ISR(USART_RXC_vect) {
     cb8:	1f 92       	push	r1
     cba:	0f 92       	push	r0
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	0f 92       	push	r0
     cc0:	11 24       	eor	r1, r1
     cc2:	2f 93       	push	r18
     cc4:	3f 93       	push	r19
     cc6:	4f 93       	push	r20
     cc8:	5f 93       	push	r21
     cca:	6f 93       	push	r22
     ccc:	7f 93       	push	r23
     cce:	8f 93       	push	r24
     cd0:	9f 93       	push	r25
     cd2:	af 93       	push	r26
     cd4:	bf 93       	push	r27
     cd6:	ef 93       	push	r30
     cd8:	ff 93       	push	r31
	char c = UDR;
     cda:	8c b1       	in	r24, 0x0c	; 12
	UDR = c;
     cdc:	8c b9       	out	0x0c, r24	; 12
	timeCounter = 0;
     cde:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <timeCounter+0x1>
     ce2:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <timeCounter>
	// Save the received character
	receivedString[counter] = c;
     ce6:	e0 91 e5 00 	lds	r30, 0x00E5	; 0x8000e5 <counter>
     cea:	ae 2f       	mov	r26, r30
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	ae 5f       	subi	r26, 0xFE	; 254
     cf0:	be 4f       	sbci	r27, 0xFE	; 254
     cf2:	8c 93       	st	X, r24
	counter++;
     cf4:	ef 5f       	subi	r30, 0xFF	; 255
     cf6:	e0 93 e5 00 	sts	0x00E5, r30	; 0x8000e5 <counter>
	if (c == '\r') { // If user has pressed ENTER (in Proteus)
     cfa:	8d 30       	cpi	r24, 0x0D	; 13
     cfc:	89 f4       	brne	.+34     	; 0xd20 <__vector_13+0x68>
		receivedString[counter] = '\0'; // Null-terminate the string
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	ee 5f       	subi	r30, 0xFE	; 254
     d02:	fe 4f       	sbci	r31, 0xFE	; 254
     d04:	10 82       	st	Z, r1
		// 		serial_send_string(receivedString);
		processCommand(receivedString);
     d06:	82 e0       	ldi	r24, 0x02	; 2
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	0e 94 4b 06 	call	0xc96	; 0xc96 <processCommand>
		// Reset the counter and clear the received string for the next input
		counter = 0;
     d0e:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <counter>
		memset(receivedString, 0, sizeof(receivedString));
     d12:	88 ec       	ldi	r24, 0xC8	; 200
     d14:	e2 e0       	ldi	r30, 0x02	; 2
     d16:	f1 e0       	ldi	r31, 0x01	; 1
     d18:	df 01       	movw	r26, r30
     d1a:	1d 92       	st	X+, r1
     d1c:	8a 95       	dec	r24
     d1e:	e9 f7       	brne	.-6      	; 0xd1a <__vector_13+0x62>
	}
}
     d20:	ff 91       	pop	r31
     d22:	ef 91       	pop	r30
     d24:	bf 91       	pop	r27
     d26:	af 91       	pop	r26
     d28:	9f 91       	pop	r25
     d2a:	8f 91       	pop	r24
     d2c:	7f 91       	pop	r23
     d2e:	6f 91       	pop	r22
     d30:	5f 91       	pop	r21
     d32:	4f 91       	pop	r20
     d34:	3f 91       	pop	r19
     d36:	2f 91       	pop	r18
     d38:	0f 90       	pop	r0
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	0f 90       	pop	r0
     d3e:	1f 90       	pop	r1
     d40:	18 95       	reti

00000d42 <serial_init>:

#include "Serial_lib.h"

void serial_init()
{
	UCSRB = (1 << RXEN) | (1 << TXEN);
     d42:	88 e1       	ldi	r24, 0x18	; 24
     d44:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
     d46:	80 b5       	in	r24, 0x20	; 32
     d48:	86 68       	ori	r24, 0x86	; 134
     d4a:	80 bd       	out	0x20, r24	; 32
	UBRRL = (int)((F_CPU / (SERIAL_BAUD_RATE * 16)) - 1);
     d4c:	83 e3       	ldi	r24, 0x33	; 51
     d4e:	89 b9       	out	0x09, r24	; 9
	
#if SERIAL_INTERRUPT == 1
	UCSRB |= (1<<RXCIE);
     d50:	8a b1       	in	r24, 0x0a	; 10
     d52:	80 68       	ori	r24, 0x80	; 128
     d54:	8a b9       	out	0x0a, r24	; 10
     d56:	08 95       	ret

00000d58 <serial_send_char>:
#endif
}

void serial_send_char(char c)
{
	UCSRA = 1 << TXC; // clear TXC bit
     d58:	90 e4       	ldi	r25, 0x40	; 64
     d5a:	9b b9       	out	0x0b, r25	; 11
	UDR = c;
     d5c:	8c b9       	out	0x0c, r24	; 12
	while ((UCSRA & (1 << TXC)) == 0);
     d5e:	5e 9b       	sbis	0x0b, 6	; 11
     d60:	fe cf       	rjmp	.-4      	; 0xd5e <serial_send_char+0x6>
}
     d62:	08 95       	ret

00000d64 <serial_send_string>:

void serial_send_string(char *s)
{
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	ec 01       	movw	r28, r24
	while (*s != '\0')
     d6a:	03 c0       	rjmp	.+6      	; 0xd72 <serial_send_string+0xe>
	{
		serial_send_char(*s);
     d6c:	0e 94 ac 06 	call	0xd58	; 0xd58 <serial_send_char>
		s++;
     d70:	21 96       	adiw	r28, 0x01	; 1
	while ((UCSRA & (1 << TXC)) == 0);
}

void serial_send_string(char *s)
{
	while (*s != '\0')
     d72:	88 81       	ld	r24, Y
     d74:	81 11       	cpse	r24, r1
     d76:	fa cf       	rjmp	.-12     	; 0xd6c <serial_send_string+0x8>
	{
		serial_send_char(*s);
		s++;
	}
}
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	08 95       	ret

00000d7e <TWI_Status>:
}

//Get TWI status. 
uint8_t TWI_Status(void)
{
	return (TWSR & 0xF8);
     d7e:	81 b1       	in	r24, 0x01	; 1
}
     d80:	88 7f       	andi	r24, 0xF8	; 248
     d82:	08 95       	ret

00000d84 <TWI_BeginTransmission>:

//Begin TWI transmission. 
uint8_t TWI_BeginTransmission(void)
{
	//Transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     d84:	84 ea       	ldi	r24, 0xA4	; 164
     d86:	86 bf       	out	0x36, r24	; 54

	//Wait for TWINT Flag set. This indicates that
	//the START condition has been transmitted.
	while (!BitCheck(TWCR, TWINT));
     d88:	06 b6       	in	r0, 0x36	; 54
     d8a:	07 fe       	sbrs	r0, 7
     d8c:	fd cf       	rjmp	.-6      	; 0xd88 <TWI_BeginTransmission+0x4>

	//Return status register
	return (TWI_Status());
     d8e:	0e 94 bf 06 	call	0xd7e	; 0xd7e <TWI_Status>
}
     d92:	08 95       	ret

00000d94 <TWI_EndTransmission>:

//End TWI transmission. 
void TWI_EndTransmission(void)
{
	//Transmit STOP condition
	TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
     d94:	85 ed       	ldi	r24, 0xD5	; 213
     d96:	86 bf       	out	0x36, r24	; 54

	//Wait for stop condition to be executed on bus
	//TWINT is not set after a stop condition!
	while(BitCheck(TWCR, TWSTO));
     d98:	06 b6       	in	r0, 0x36	; 54
     d9a:	04 fc       	sbrc	r0, 4
     d9c:	fd cf       	rjmp	.-6      	; 0xd98 <TWI_EndTransmission+0x4>
}
     d9e:	08 95       	ret

00000da0 <TWI_Transmit>:

//Transmit data. 
uint8_t TWI_Transmit(uint8_t Data)
{
	//Data to be transmitted
	TWDR = Data;
     da0:	83 b9       	out	0x03, r24	; 3

	//Start transmission
	TWCR = (1<<TWINT) | (1<<TWEN);
     da2:	84 e8       	ldi	r24, 0x84	; 132
     da4:	86 bf       	out	0x36, r24	; 54

	//Wait data to be shifted
	while (!BitCheck(TWCR, TWINT));
     da6:	06 b6       	in	r0, 0x36	; 54
     da8:	07 fe       	sbrs	r0, 7
     daa:	fd cf       	rjmp	.-6      	; 0xda6 <TWI_Transmit+0x6>

	//Return status register
	return (TWI_Status());
     dac:	0e 94 bf 06 	call	0xd7e	; 0xd7e <TWI_Status>
}
     db0:	08 95       	ret

00000db2 <TWI_ReceiveACK>:

//Wait until ACK received. 
uint8_t TWI_ReceiveACK(void)
{
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     db2:	84 ec       	ldi	r24, 0xC4	; 196
     db4:	86 bf       	out	0x36, r24	; 54
	
	//Wait till reception is
	while (!BitCheck(TWCR, TWINT));
     db6:	06 b6       	in	r0, 0x36	; 54
     db8:	07 fe       	sbrs	r0, 7
     dba:	fd cf       	rjmp	.-6      	; 0xdb6 <TWI_ReceiveACK+0x4>

	//Return received data
	return TWDR;
     dbc:	83 b1       	in	r24, 0x03	; 3
}
     dbe:	08 95       	ret

00000dc0 <TWI_ReceiveNACK>:

//Wait until NACK received. 
uint8_t TWI_ReceiveNACK(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     dc0:	84 e8       	ldi	r24, 0x84	; 132
     dc2:	86 bf       	out	0x36, r24	; 54

	//Wait till reception is
	while (!BitCheck(TWCR, TWINT));
     dc4:	06 b6       	in	r0, 0x36	; 54
     dc6:	07 fe       	sbrs	r0, 7
     dc8:	fd cf       	rjmp	.-6      	; 0xdc4 <TWI_ReceiveNACK+0x4>

	//Return received data
	return TWDR;
     dca:	83 b1       	in	r24, 0x03	; 3
}
     dcc:	08 95       	ret

00000dce <__cmpsf2>:
     dce:	0e 94 29 07 	call	0xe52	; 0xe52 <__fp_cmp>
     dd2:	08 f4       	brcc	.+2      	; 0xdd6 <__cmpsf2+0x8>
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	08 95       	ret

00000dd8 <__floatunsisf>:
     dd8:	e8 94       	clt
     dda:	09 c0       	rjmp	.+18     	; 0xdee <__floatsisf+0x12>

00000ddc <__floatsisf>:
     ddc:	97 fb       	bst	r25, 7
     dde:	3e f4       	brtc	.+14     	; 0xdee <__floatsisf+0x12>
     de0:	90 95       	com	r25
     de2:	80 95       	com	r24
     de4:	70 95       	com	r23
     de6:	61 95       	neg	r22
     de8:	7f 4f       	sbci	r23, 0xFF	; 255
     dea:	8f 4f       	sbci	r24, 0xFF	; 255
     dec:	9f 4f       	sbci	r25, 0xFF	; 255
     dee:	99 23       	and	r25, r25
     df0:	a9 f0       	breq	.+42     	; 0xe1c <__floatsisf+0x40>
     df2:	f9 2f       	mov	r31, r25
     df4:	96 e9       	ldi	r25, 0x96	; 150
     df6:	bb 27       	eor	r27, r27
     df8:	93 95       	inc	r25
     dfa:	f6 95       	lsr	r31
     dfc:	87 95       	ror	r24
     dfe:	77 95       	ror	r23
     e00:	67 95       	ror	r22
     e02:	b7 95       	ror	r27
     e04:	f1 11       	cpse	r31, r1
     e06:	f8 cf       	rjmp	.-16     	; 0xdf8 <__floatsisf+0x1c>
     e08:	fa f4       	brpl	.+62     	; 0xe48 <__floatsisf+0x6c>
     e0a:	bb 0f       	add	r27, r27
     e0c:	11 f4       	brne	.+4      	; 0xe12 <__floatsisf+0x36>
     e0e:	60 ff       	sbrs	r22, 0
     e10:	1b c0       	rjmp	.+54     	; 0xe48 <__floatsisf+0x6c>
     e12:	6f 5f       	subi	r22, 0xFF	; 255
     e14:	7f 4f       	sbci	r23, 0xFF	; 255
     e16:	8f 4f       	sbci	r24, 0xFF	; 255
     e18:	9f 4f       	sbci	r25, 0xFF	; 255
     e1a:	16 c0       	rjmp	.+44     	; 0xe48 <__floatsisf+0x6c>
     e1c:	88 23       	and	r24, r24
     e1e:	11 f0       	breq	.+4      	; 0xe24 <__floatsisf+0x48>
     e20:	96 e9       	ldi	r25, 0x96	; 150
     e22:	11 c0       	rjmp	.+34     	; 0xe46 <__floatsisf+0x6a>
     e24:	77 23       	and	r23, r23
     e26:	21 f0       	breq	.+8      	; 0xe30 <__floatsisf+0x54>
     e28:	9e e8       	ldi	r25, 0x8E	; 142
     e2a:	87 2f       	mov	r24, r23
     e2c:	76 2f       	mov	r23, r22
     e2e:	05 c0       	rjmp	.+10     	; 0xe3a <__floatsisf+0x5e>
     e30:	66 23       	and	r22, r22
     e32:	71 f0       	breq	.+28     	; 0xe50 <__floatsisf+0x74>
     e34:	96 e8       	ldi	r25, 0x86	; 134
     e36:	86 2f       	mov	r24, r22
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	2a f0       	brmi	.+10     	; 0xe48 <__floatsisf+0x6c>
     e3e:	9a 95       	dec	r25
     e40:	66 0f       	add	r22, r22
     e42:	77 1f       	adc	r23, r23
     e44:	88 1f       	adc	r24, r24
     e46:	da f7       	brpl	.-10     	; 0xe3e <__floatsisf+0x62>
     e48:	88 0f       	add	r24, r24
     e4a:	96 95       	lsr	r25
     e4c:	87 95       	ror	r24
     e4e:	97 f9       	bld	r25, 7
     e50:	08 95       	ret

00000e52 <__fp_cmp>:
     e52:	99 0f       	add	r25, r25
     e54:	00 08       	sbc	r0, r0
     e56:	55 0f       	add	r21, r21
     e58:	aa 0b       	sbc	r26, r26
     e5a:	e0 e8       	ldi	r30, 0x80	; 128
     e5c:	fe ef       	ldi	r31, 0xFE	; 254
     e5e:	16 16       	cp	r1, r22
     e60:	17 06       	cpc	r1, r23
     e62:	e8 07       	cpc	r30, r24
     e64:	f9 07       	cpc	r31, r25
     e66:	c0 f0       	brcs	.+48     	; 0xe98 <__fp_cmp+0x46>
     e68:	12 16       	cp	r1, r18
     e6a:	13 06       	cpc	r1, r19
     e6c:	e4 07       	cpc	r30, r20
     e6e:	f5 07       	cpc	r31, r21
     e70:	98 f0       	brcs	.+38     	; 0xe98 <__fp_cmp+0x46>
     e72:	62 1b       	sub	r22, r18
     e74:	73 0b       	sbc	r23, r19
     e76:	84 0b       	sbc	r24, r20
     e78:	95 0b       	sbc	r25, r21
     e7a:	39 f4       	brne	.+14     	; 0xe8a <__fp_cmp+0x38>
     e7c:	0a 26       	eor	r0, r26
     e7e:	61 f0       	breq	.+24     	; 0xe98 <__fp_cmp+0x46>
     e80:	23 2b       	or	r18, r19
     e82:	24 2b       	or	r18, r20
     e84:	25 2b       	or	r18, r21
     e86:	21 f4       	brne	.+8      	; 0xe90 <__fp_cmp+0x3e>
     e88:	08 95       	ret
     e8a:	0a 26       	eor	r0, r26
     e8c:	09 f4       	brne	.+2      	; 0xe90 <__fp_cmp+0x3e>
     e8e:	a1 40       	sbci	r26, 0x01	; 1
     e90:	a6 95       	lsr	r26
     e92:	8f ef       	ldi	r24, 0xFF	; 255
     e94:	81 1d       	adc	r24, r1
     e96:	81 1d       	adc	r24, r1
     e98:	08 95       	ret

00000e9a <__mulsf3>:
     e9a:	0e 94 60 07 	call	0xec0	; 0xec0 <__mulsf3x>
     e9e:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_round>
     ea2:	0e 94 c3 07 	call	0xf86	; 0xf86 <__fp_pscA>
     ea6:	38 f0       	brcs	.+14     	; 0xeb6 <__mulsf3+0x1c>
     ea8:	0e 94 ca 07 	call	0xf94	; 0xf94 <__fp_pscB>
     eac:	20 f0       	brcs	.+8      	; 0xeb6 <__mulsf3+0x1c>
     eae:	95 23       	and	r25, r21
     eb0:	11 f0       	breq	.+4      	; 0xeb6 <__mulsf3+0x1c>
     eb2:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__fp_inf>
     eb6:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__fp_nan>
     eba:	11 24       	eor	r1, r1
     ebc:	0c 94 05 08 	jmp	0x100a	; 0x100a <__fp_szero>

00000ec0 <__mulsf3x>:
     ec0:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__fp_split3>
     ec4:	70 f3       	brcs	.-36     	; 0xea2 <__mulsf3+0x8>

00000ec6 <__mulsf3_pse>:
     ec6:	95 9f       	mul	r25, r21
     ec8:	c1 f3       	breq	.-16     	; 0xeba <__mulsf3+0x20>
     eca:	95 0f       	add	r25, r21
     ecc:	50 e0       	ldi	r21, 0x00	; 0
     ece:	55 1f       	adc	r21, r21
     ed0:	62 9f       	mul	r22, r18
     ed2:	f0 01       	movw	r30, r0
     ed4:	72 9f       	mul	r23, r18
     ed6:	bb 27       	eor	r27, r27
     ed8:	f0 0d       	add	r31, r0
     eda:	b1 1d       	adc	r27, r1
     edc:	63 9f       	mul	r22, r19
     ede:	aa 27       	eor	r26, r26
     ee0:	f0 0d       	add	r31, r0
     ee2:	b1 1d       	adc	r27, r1
     ee4:	aa 1f       	adc	r26, r26
     ee6:	64 9f       	mul	r22, r20
     ee8:	66 27       	eor	r22, r22
     eea:	b0 0d       	add	r27, r0
     eec:	a1 1d       	adc	r26, r1
     eee:	66 1f       	adc	r22, r22
     ef0:	82 9f       	mul	r24, r18
     ef2:	22 27       	eor	r18, r18
     ef4:	b0 0d       	add	r27, r0
     ef6:	a1 1d       	adc	r26, r1
     ef8:	62 1f       	adc	r22, r18
     efa:	73 9f       	mul	r23, r19
     efc:	b0 0d       	add	r27, r0
     efe:	a1 1d       	adc	r26, r1
     f00:	62 1f       	adc	r22, r18
     f02:	83 9f       	mul	r24, r19
     f04:	a0 0d       	add	r26, r0
     f06:	61 1d       	adc	r22, r1
     f08:	22 1f       	adc	r18, r18
     f0a:	74 9f       	mul	r23, r20
     f0c:	33 27       	eor	r19, r19
     f0e:	a0 0d       	add	r26, r0
     f10:	61 1d       	adc	r22, r1
     f12:	23 1f       	adc	r18, r19
     f14:	84 9f       	mul	r24, r20
     f16:	60 0d       	add	r22, r0
     f18:	21 1d       	adc	r18, r1
     f1a:	82 2f       	mov	r24, r18
     f1c:	76 2f       	mov	r23, r22
     f1e:	6a 2f       	mov	r22, r26
     f20:	11 24       	eor	r1, r1
     f22:	9f 57       	subi	r25, 0x7F	; 127
     f24:	50 40       	sbci	r21, 0x00	; 0
     f26:	9a f0       	brmi	.+38     	; 0xf4e <__mulsf3_pse+0x88>
     f28:	f1 f0       	breq	.+60     	; 0xf66 <__mulsf3_pse+0xa0>
     f2a:	88 23       	and	r24, r24
     f2c:	4a f0       	brmi	.+18     	; 0xf40 <__mulsf3_pse+0x7a>
     f2e:	ee 0f       	add	r30, r30
     f30:	ff 1f       	adc	r31, r31
     f32:	bb 1f       	adc	r27, r27
     f34:	66 1f       	adc	r22, r22
     f36:	77 1f       	adc	r23, r23
     f38:	88 1f       	adc	r24, r24
     f3a:	91 50       	subi	r25, 0x01	; 1
     f3c:	50 40       	sbci	r21, 0x00	; 0
     f3e:	a9 f7       	brne	.-22     	; 0xf2a <__mulsf3_pse+0x64>
     f40:	9e 3f       	cpi	r25, 0xFE	; 254
     f42:	51 05       	cpc	r21, r1
     f44:	80 f0       	brcs	.+32     	; 0xf66 <__mulsf3_pse+0xa0>
     f46:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__fp_inf>
     f4a:	0c 94 05 08 	jmp	0x100a	; 0x100a <__fp_szero>
     f4e:	5f 3f       	cpi	r21, 0xFF	; 255
     f50:	e4 f3       	brlt	.-8      	; 0xf4a <__mulsf3_pse+0x84>
     f52:	98 3e       	cpi	r25, 0xE8	; 232
     f54:	d4 f3       	brlt	.-12     	; 0xf4a <__mulsf3_pse+0x84>
     f56:	86 95       	lsr	r24
     f58:	77 95       	ror	r23
     f5a:	67 95       	ror	r22
     f5c:	b7 95       	ror	r27
     f5e:	f7 95       	ror	r31
     f60:	e7 95       	ror	r30
     f62:	9f 5f       	subi	r25, 0xFF	; 255
     f64:	c1 f7       	brne	.-16     	; 0xf56 <__mulsf3_pse+0x90>
     f66:	fe 2b       	or	r31, r30
     f68:	88 0f       	add	r24, r24
     f6a:	91 1d       	adc	r25, r1
     f6c:	96 95       	lsr	r25
     f6e:	87 95       	ror	r24
     f70:	97 f9       	bld	r25, 7
     f72:	08 95       	ret

00000f74 <__fp_inf>:
     f74:	97 f9       	bld	r25, 7
     f76:	9f 67       	ori	r25, 0x7F	; 127
     f78:	80 e8       	ldi	r24, 0x80	; 128
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	08 95       	ret

00000f80 <__fp_nan>:
     f80:	9f ef       	ldi	r25, 0xFF	; 255
     f82:	80 ec       	ldi	r24, 0xC0	; 192
     f84:	08 95       	ret

00000f86 <__fp_pscA>:
     f86:	00 24       	eor	r0, r0
     f88:	0a 94       	dec	r0
     f8a:	16 16       	cp	r1, r22
     f8c:	17 06       	cpc	r1, r23
     f8e:	18 06       	cpc	r1, r24
     f90:	09 06       	cpc	r0, r25
     f92:	08 95       	ret

00000f94 <__fp_pscB>:
     f94:	00 24       	eor	r0, r0
     f96:	0a 94       	dec	r0
     f98:	12 16       	cp	r1, r18
     f9a:	13 06       	cpc	r1, r19
     f9c:	14 06       	cpc	r1, r20
     f9e:	05 06       	cpc	r0, r21
     fa0:	08 95       	ret

00000fa2 <__fp_round>:
     fa2:	09 2e       	mov	r0, r25
     fa4:	03 94       	inc	r0
     fa6:	00 0c       	add	r0, r0
     fa8:	11 f4       	brne	.+4      	; 0xfae <__fp_round+0xc>
     faa:	88 23       	and	r24, r24
     fac:	52 f0       	brmi	.+20     	; 0xfc2 <__fp_round+0x20>
     fae:	bb 0f       	add	r27, r27
     fb0:	40 f4       	brcc	.+16     	; 0xfc2 <__fp_round+0x20>
     fb2:	bf 2b       	or	r27, r31
     fb4:	11 f4       	brne	.+4      	; 0xfba <__fp_round+0x18>
     fb6:	60 ff       	sbrs	r22, 0
     fb8:	04 c0       	rjmp	.+8      	; 0xfc2 <__fp_round+0x20>
     fba:	6f 5f       	subi	r22, 0xFF	; 255
     fbc:	7f 4f       	sbci	r23, 0xFF	; 255
     fbe:	8f 4f       	sbci	r24, 0xFF	; 255
     fc0:	9f 4f       	sbci	r25, 0xFF	; 255
     fc2:	08 95       	ret

00000fc4 <__fp_split3>:
     fc4:	57 fd       	sbrc	r21, 7
     fc6:	90 58       	subi	r25, 0x80	; 128
     fc8:	44 0f       	add	r20, r20
     fca:	55 1f       	adc	r21, r21
     fcc:	59 f0       	breq	.+22     	; 0xfe4 <__fp_splitA+0x10>
     fce:	5f 3f       	cpi	r21, 0xFF	; 255
     fd0:	71 f0       	breq	.+28     	; 0xfee <__fp_splitA+0x1a>
     fd2:	47 95       	ror	r20

00000fd4 <__fp_splitA>:
     fd4:	88 0f       	add	r24, r24
     fd6:	97 fb       	bst	r25, 7
     fd8:	99 1f       	adc	r25, r25
     fda:	61 f0       	breq	.+24     	; 0xff4 <__fp_splitA+0x20>
     fdc:	9f 3f       	cpi	r25, 0xFF	; 255
     fde:	79 f0       	breq	.+30     	; 0xffe <__fp_splitA+0x2a>
     fe0:	87 95       	ror	r24
     fe2:	08 95       	ret
     fe4:	12 16       	cp	r1, r18
     fe6:	13 06       	cpc	r1, r19
     fe8:	14 06       	cpc	r1, r20
     fea:	55 1f       	adc	r21, r21
     fec:	f2 cf       	rjmp	.-28     	; 0xfd2 <__fp_split3+0xe>
     fee:	46 95       	lsr	r20
     ff0:	f1 df       	rcall	.-30     	; 0xfd4 <__fp_splitA>
     ff2:	08 c0       	rjmp	.+16     	; 0x1004 <__fp_splitA+0x30>
     ff4:	16 16       	cp	r1, r22
     ff6:	17 06       	cpc	r1, r23
     ff8:	18 06       	cpc	r1, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	f1 cf       	rjmp	.-30     	; 0xfe0 <__fp_splitA+0xc>
     ffe:	86 95       	lsr	r24
    1000:	71 05       	cpc	r23, r1
    1002:	61 05       	cpc	r22, r1
    1004:	08 94       	sec
    1006:	08 95       	ret

00001008 <__fp_zero>:
    1008:	e8 94       	clt

0000100a <__fp_szero>:
    100a:	bb 27       	eor	r27, r27
    100c:	66 27       	eor	r22, r22
    100e:	77 27       	eor	r23, r23
    1010:	cb 01       	movw	r24, r22
    1012:	97 f9       	bld	r25, 7
    1014:	08 95       	ret

00001016 <__udivmodsi4>:
    1016:	a1 e2       	ldi	r26, 0x21	; 33
    1018:	1a 2e       	mov	r1, r26
    101a:	aa 1b       	sub	r26, r26
    101c:	bb 1b       	sub	r27, r27
    101e:	fd 01       	movw	r30, r26
    1020:	0d c0       	rjmp	.+26     	; 0x103c <__udivmodsi4_ep>

00001022 <__udivmodsi4_loop>:
    1022:	aa 1f       	adc	r26, r26
    1024:	bb 1f       	adc	r27, r27
    1026:	ee 1f       	adc	r30, r30
    1028:	ff 1f       	adc	r31, r31
    102a:	a2 17       	cp	r26, r18
    102c:	b3 07       	cpc	r27, r19
    102e:	e4 07       	cpc	r30, r20
    1030:	f5 07       	cpc	r31, r21
    1032:	20 f0       	brcs	.+8      	; 0x103c <__udivmodsi4_ep>
    1034:	a2 1b       	sub	r26, r18
    1036:	b3 0b       	sbc	r27, r19
    1038:	e4 0b       	sbc	r30, r20
    103a:	f5 0b       	sbc	r31, r21

0000103c <__udivmodsi4_ep>:
    103c:	66 1f       	adc	r22, r22
    103e:	77 1f       	adc	r23, r23
    1040:	88 1f       	adc	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	1a 94       	dec	r1
    1046:	69 f7       	brne	.-38     	; 0x1022 <__udivmodsi4_loop>
    1048:	60 95       	com	r22
    104a:	70 95       	com	r23
    104c:	80 95       	com	r24
    104e:	90 95       	com	r25
    1050:	9b 01       	movw	r18, r22
    1052:	ac 01       	movw	r20, r24
    1054:	bd 01       	movw	r22, r26
    1056:	cf 01       	movw	r24, r30
    1058:	08 95       	ret

0000105a <strstr>:
    105a:	fb 01       	movw	r30, r22
    105c:	51 91       	ld	r21, Z+
    105e:	55 23       	and	r21, r21
    1060:	a9 f0       	breq	.+42     	; 0x108c <strstr+0x32>
    1062:	bf 01       	movw	r22, r30
    1064:	dc 01       	movw	r26, r24
    1066:	4d 91       	ld	r20, X+
    1068:	45 17       	cp	r20, r21
    106a:	41 11       	cpse	r20, r1
    106c:	e1 f7       	brne	.-8      	; 0x1066 <strstr+0xc>
    106e:	59 f4       	brne	.+22     	; 0x1086 <strstr+0x2c>
    1070:	cd 01       	movw	r24, r26
    1072:	01 90       	ld	r0, Z+
    1074:	00 20       	and	r0, r0
    1076:	49 f0       	breq	.+18     	; 0x108a <strstr+0x30>
    1078:	4d 91       	ld	r20, X+
    107a:	40 15       	cp	r20, r0
    107c:	41 11       	cpse	r20, r1
    107e:	c9 f3       	breq	.-14     	; 0x1072 <strstr+0x18>
    1080:	fb 01       	movw	r30, r22
    1082:	41 11       	cpse	r20, r1
    1084:	ef cf       	rjmp	.-34     	; 0x1064 <strstr+0xa>
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	08 95       	ret

0000108e <sprintf>:
    108e:	ae e0       	ldi	r26, 0x0E	; 14
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	ed e4       	ldi	r30, 0x4D	; 77
    1094:	f8 e0       	ldi	r31, 0x08	; 8
    1096:	0c 94 3c 0e 	jmp	0x1c78	; 0x1c78 <__prologue_saves__+0x1c>
    109a:	0d 89       	ldd	r16, Y+21	; 0x15
    109c:	1e 89       	ldd	r17, Y+22	; 0x16
    109e:	86 e0       	ldi	r24, 0x06	; 6
    10a0:	8c 83       	std	Y+4, r24	; 0x04
    10a2:	1a 83       	std	Y+2, r17	; 0x02
    10a4:	09 83       	std	Y+1, r16	; 0x01
    10a6:	8f ef       	ldi	r24, 0xFF	; 255
    10a8:	9f e7       	ldi	r25, 0x7F	; 127
    10aa:	9e 83       	std	Y+6, r25	; 0x06
    10ac:	8d 83       	std	Y+5, r24	; 0x05
    10ae:	ae 01       	movw	r20, r28
    10b0:	47 5e       	subi	r20, 0xE7	; 231
    10b2:	5f 4f       	sbci	r21, 0xFF	; 255
    10b4:	6f 89       	ldd	r22, Y+23	; 0x17
    10b6:	78 8d       	ldd	r23, Y+24	; 0x18
    10b8:	ce 01       	movw	r24, r28
    10ba:	01 96       	adiw	r24, 0x01	; 1
    10bc:	0e 94 82 08 	call	0x1104	; 0x1104 <vfprintf>
    10c0:	ef 81       	ldd	r30, Y+7	; 0x07
    10c2:	f8 85       	ldd	r31, Y+8	; 0x08
    10c4:	e0 0f       	add	r30, r16
    10c6:	f1 1f       	adc	r31, r17
    10c8:	10 82       	st	Z, r1
    10ca:	2e 96       	adiw	r28, 0x0e	; 14
    10cc:	e4 e0       	ldi	r30, 0x04	; 4
    10ce:	0c 94 58 0e 	jmp	0x1cb0	; 0x1cb0 <__epilogue_restores__+0x1c>

000010d2 <sscanf>:
    10d2:	ae e0       	ldi	r26, 0x0E	; 14
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	ef e6       	ldi	r30, 0x6F	; 111
    10d8:	f8 e0       	ldi	r31, 0x08	; 8
    10da:	0c 94 3e 0e 	jmp	0x1c7c	; 0x1c7c <__prologue_saves__+0x20>
    10de:	85 e0       	ldi	r24, 0x05	; 5
    10e0:	8c 83       	std	Y+4, r24	; 0x04
    10e2:	8b 89       	ldd	r24, Y+19	; 0x13
    10e4:	9c 89       	ldd	r25, Y+20	; 0x14
    10e6:	9a 83       	std	Y+2, r25	; 0x02
    10e8:	89 83       	std	Y+1, r24	; 0x01
    10ea:	ae 01       	movw	r20, r28
    10ec:	49 5e       	subi	r20, 0xE9	; 233
    10ee:	5f 4f       	sbci	r21, 0xFF	; 255
    10f0:	6d 89       	ldd	r22, Y+21	; 0x15
    10f2:	7e 89       	ldd	r23, Y+22	; 0x16
    10f4:	ce 01       	movw	r24, r28
    10f6:	01 96       	adiw	r24, 0x01	; 1
    10f8:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <vfscanf>
    10fc:	2e 96       	adiw	r28, 0x0e	; 14
    10fe:	e2 e0       	ldi	r30, 0x02	; 2
    1100:	0c 94 5a 0e 	jmp	0x1cb4	; 0x1cb4 <__epilogue_restores__+0x20>

00001104 <vfprintf>:
    1104:	ab e0       	ldi	r26, 0x0B	; 11
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e8 e8       	ldi	r30, 0x88	; 136
    110a:	f8 e0       	ldi	r31, 0x08	; 8
    110c:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <__prologue_saves__>
    1110:	6c 01       	movw	r12, r24
    1112:	7b 01       	movw	r14, r22
    1114:	8a 01       	movw	r16, r20
    1116:	fc 01       	movw	r30, r24
    1118:	17 82       	std	Z+7, r1	; 0x07
    111a:	16 82       	std	Z+6, r1	; 0x06
    111c:	83 81       	ldd	r24, Z+3	; 0x03
    111e:	81 ff       	sbrs	r24, 1
    1120:	cc c1       	rjmp	.+920    	; 0x14ba <vfprintf+0x3b6>
    1122:	ce 01       	movw	r24, r28
    1124:	01 96       	adiw	r24, 0x01	; 1
    1126:	3c 01       	movw	r6, r24
    1128:	f6 01       	movw	r30, r12
    112a:	93 81       	ldd	r25, Z+3	; 0x03
    112c:	f7 01       	movw	r30, r14
    112e:	93 fd       	sbrc	r25, 3
    1130:	85 91       	lpm	r24, Z+
    1132:	93 ff       	sbrs	r25, 3
    1134:	81 91       	ld	r24, Z+
    1136:	7f 01       	movw	r14, r30
    1138:	88 23       	and	r24, r24
    113a:	09 f4       	brne	.+2      	; 0x113e <vfprintf+0x3a>
    113c:	ba c1       	rjmp	.+884    	; 0x14b2 <vfprintf+0x3ae>
    113e:	85 32       	cpi	r24, 0x25	; 37
    1140:	39 f4       	brne	.+14     	; 0x1150 <vfprintf+0x4c>
    1142:	93 fd       	sbrc	r25, 3
    1144:	85 91       	lpm	r24, Z+
    1146:	93 ff       	sbrs	r25, 3
    1148:	81 91       	ld	r24, Z+
    114a:	7f 01       	movw	r14, r30
    114c:	85 32       	cpi	r24, 0x25	; 37
    114e:	29 f4       	brne	.+10     	; 0x115a <vfprintf+0x56>
    1150:	b6 01       	movw	r22, r12
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <fputc>
    1158:	e7 cf       	rjmp	.-50     	; 0x1128 <vfprintf+0x24>
    115a:	91 2c       	mov	r9, r1
    115c:	21 2c       	mov	r2, r1
    115e:	31 2c       	mov	r3, r1
    1160:	ff e1       	ldi	r31, 0x1F	; 31
    1162:	f3 15       	cp	r31, r3
    1164:	d8 f0       	brcs	.+54     	; 0x119c <vfprintf+0x98>
    1166:	8b 32       	cpi	r24, 0x2B	; 43
    1168:	79 f0       	breq	.+30     	; 0x1188 <vfprintf+0x84>
    116a:	38 f4       	brcc	.+14     	; 0x117a <vfprintf+0x76>
    116c:	80 32       	cpi	r24, 0x20	; 32
    116e:	79 f0       	breq	.+30     	; 0x118e <vfprintf+0x8a>
    1170:	83 32       	cpi	r24, 0x23	; 35
    1172:	a1 f4       	brne	.+40     	; 0x119c <vfprintf+0x98>
    1174:	23 2d       	mov	r18, r3
    1176:	20 61       	ori	r18, 0x10	; 16
    1178:	1d c0       	rjmp	.+58     	; 0x11b4 <vfprintf+0xb0>
    117a:	8d 32       	cpi	r24, 0x2D	; 45
    117c:	61 f0       	breq	.+24     	; 0x1196 <vfprintf+0x92>
    117e:	80 33       	cpi	r24, 0x30	; 48
    1180:	69 f4       	brne	.+26     	; 0x119c <vfprintf+0x98>
    1182:	23 2d       	mov	r18, r3
    1184:	21 60       	ori	r18, 0x01	; 1
    1186:	16 c0       	rjmp	.+44     	; 0x11b4 <vfprintf+0xb0>
    1188:	83 2d       	mov	r24, r3
    118a:	82 60       	ori	r24, 0x02	; 2
    118c:	38 2e       	mov	r3, r24
    118e:	e3 2d       	mov	r30, r3
    1190:	e4 60       	ori	r30, 0x04	; 4
    1192:	3e 2e       	mov	r3, r30
    1194:	2a c0       	rjmp	.+84     	; 0x11ea <vfprintf+0xe6>
    1196:	f3 2d       	mov	r31, r3
    1198:	f8 60       	ori	r31, 0x08	; 8
    119a:	1d c0       	rjmp	.+58     	; 0x11d6 <vfprintf+0xd2>
    119c:	37 fc       	sbrc	r3, 7
    119e:	2d c0       	rjmp	.+90     	; 0x11fa <vfprintf+0xf6>
    11a0:	20 ed       	ldi	r18, 0xD0	; 208
    11a2:	28 0f       	add	r18, r24
    11a4:	2a 30       	cpi	r18, 0x0A	; 10
    11a6:	40 f0       	brcs	.+16     	; 0x11b8 <vfprintf+0xb4>
    11a8:	8e 32       	cpi	r24, 0x2E	; 46
    11aa:	b9 f4       	brne	.+46     	; 0x11da <vfprintf+0xd6>
    11ac:	36 fc       	sbrc	r3, 6
    11ae:	81 c1       	rjmp	.+770    	; 0x14b2 <vfprintf+0x3ae>
    11b0:	23 2d       	mov	r18, r3
    11b2:	20 64       	ori	r18, 0x40	; 64
    11b4:	32 2e       	mov	r3, r18
    11b6:	19 c0       	rjmp	.+50     	; 0x11ea <vfprintf+0xe6>
    11b8:	36 fe       	sbrs	r3, 6
    11ba:	06 c0       	rjmp	.+12     	; 0x11c8 <vfprintf+0xc4>
    11bc:	8a e0       	ldi	r24, 0x0A	; 10
    11be:	98 9e       	mul	r9, r24
    11c0:	20 0d       	add	r18, r0
    11c2:	11 24       	eor	r1, r1
    11c4:	92 2e       	mov	r9, r18
    11c6:	11 c0       	rjmp	.+34     	; 0x11ea <vfprintf+0xe6>
    11c8:	ea e0       	ldi	r30, 0x0A	; 10
    11ca:	2e 9e       	mul	r2, r30
    11cc:	20 0d       	add	r18, r0
    11ce:	11 24       	eor	r1, r1
    11d0:	22 2e       	mov	r2, r18
    11d2:	f3 2d       	mov	r31, r3
    11d4:	f0 62       	ori	r31, 0x20	; 32
    11d6:	3f 2e       	mov	r3, r31
    11d8:	08 c0       	rjmp	.+16     	; 0x11ea <vfprintf+0xe6>
    11da:	8c 36       	cpi	r24, 0x6C	; 108
    11dc:	21 f4       	brne	.+8      	; 0x11e6 <vfprintf+0xe2>
    11de:	83 2d       	mov	r24, r3
    11e0:	80 68       	ori	r24, 0x80	; 128
    11e2:	38 2e       	mov	r3, r24
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <vfprintf+0xe6>
    11e6:	88 36       	cpi	r24, 0x68	; 104
    11e8:	41 f4       	brne	.+16     	; 0x11fa <vfprintf+0xf6>
    11ea:	f7 01       	movw	r30, r14
    11ec:	93 fd       	sbrc	r25, 3
    11ee:	85 91       	lpm	r24, Z+
    11f0:	93 ff       	sbrs	r25, 3
    11f2:	81 91       	ld	r24, Z+
    11f4:	7f 01       	movw	r14, r30
    11f6:	81 11       	cpse	r24, r1
    11f8:	b3 cf       	rjmp	.-154    	; 0x1160 <vfprintf+0x5c>
    11fa:	98 2f       	mov	r25, r24
    11fc:	9f 7d       	andi	r25, 0xDF	; 223
    11fe:	95 54       	subi	r25, 0x45	; 69
    1200:	93 30       	cpi	r25, 0x03	; 3
    1202:	28 f4       	brcc	.+10     	; 0x120e <vfprintf+0x10a>
    1204:	0c 5f       	subi	r16, 0xFC	; 252
    1206:	1f 4f       	sbci	r17, 0xFF	; 255
    1208:	9f e3       	ldi	r25, 0x3F	; 63
    120a:	99 83       	std	Y+1, r25	; 0x01
    120c:	0d c0       	rjmp	.+26     	; 0x1228 <vfprintf+0x124>
    120e:	83 36       	cpi	r24, 0x63	; 99
    1210:	31 f0       	breq	.+12     	; 0x121e <vfprintf+0x11a>
    1212:	83 37       	cpi	r24, 0x73	; 115
    1214:	71 f0       	breq	.+28     	; 0x1232 <vfprintf+0x12e>
    1216:	83 35       	cpi	r24, 0x53	; 83
    1218:	09 f0       	breq	.+2      	; 0x121c <vfprintf+0x118>
    121a:	59 c0       	rjmp	.+178    	; 0x12ce <vfprintf+0x1ca>
    121c:	21 c0       	rjmp	.+66     	; 0x1260 <vfprintf+0x15c>
    121e:	f8 01       	movw	r30, r16
    1220:	80 81       	ld	r24, Z
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	0e 5f       	subi	r16, 0xFE	; 254
    1226:	1f 4f       	sbci	r17, 0xFF	; 255
    1228:	88 24       	eor	r8, r8
    122a:	83 94       	inc	r8
    122c:	91 2c       	mov	r9, r1
    122e:	53 01       	movw	r10, r6
    1230:	13 c0       	rjmp	.+38     	; 0x1258 <vfprintf+0x154>
    1232:	28 01       	movw	r4, r16
    1234:	f2 e0       	ldi	r31, 0x02	; 2
    1236:	4f 0e       	add	r4, r31
    1238:	51 1c       	adc	r5, r1
    123a:	f8 01       	movw	r30, r16
    123c:	a0 80       	ld	r10, Z
    123e:	b1 80       	ldd	r11, Z+1	; 0x01
    1240:	36 fe       	sbrs	r3, 6
    1242:	03 c0       	rjmp	.+6      	; 0x124a <vfprintf+0x146>
    1244:	69 2d       	mov	r22, r9
    1246:	70 e0       	ldi	r23, 0x00	; 0
    1248:	02 c0       	rjmp	.+4      	; 0x124e <vfprintf+0x14a>
    124a:	6f ef       	ldi	r22, 0xFF	; 255
    124c:	7f ef       	ldi	r23, 0xFF	; 255
    124e:	c5 01       	movw	r24, r10
    1250:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <strnlen>
    1254:	4c 01       	movw	r8, r24
    1256:	82 01       	movw	r16, r4
    1258:	f3 2d       	mov	r31, r3
    125a:	ff 77       	andi	r31, 0x7F	; 127
    125c:	3f 2e       	mov	r3, r31
    125e:	16 c0       	rjmp	.+44     	; 0x128c <vfprintf+0x188>
    1260:	28 01       	movw	r4, r16
    1262:	22 e0       	ldi	r18, 0x02	; 2
    1264:	42 0e       	add	r4, r18
    1266:	51 1c       	adc	r5, r1
    1268:	f8 01       	movw	r30, r16
    126a:	a0 80       	ld	r10, Z
    126c:	b1 80       	ldd	r11, Z+1	; 0x01
    126e:	36 fe       	sbrs	r3, 6
    1270:	03 c0       	rjmp	.+6      	; 0x1278 <vfprintf+0x174>
    1272:	69 2d       	mov	r22, r9
    1274:	70 e0       	ldi	r23, 0x00	; 0
    1276:	02 c0       	rjmp	.+4      	; 0x127c <vfprintf+0x178>
    1278:	6f ef       	ldi	r22, 0xFF	; 255
    127a:	7f ef       	ldi	r23, 0xFF	; 255
    127c:	c5 01       	movw	r24, r10
    127e:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <strnlen_P>
    1282:	4c 01       	movw	r8, r24
    1284:	f3 2d       	mov	r31, r3
    1286:	f0 68       	ori	r31, 0x80	; 128
    1288:	3f 2e       	mov	r3, r31
    128a:	82 01       	movw	r16, r4
    128c:	33 fc       	sbrc	r3, 3
    128e:	1b c0       	rjmp	.+54     	; 0x12c6 <vfprintf+0x1c2>
    1290:	82 2d       	mov	r24, r2
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	88 16       	cp	r8, r24
    1296:	99 06       	cpc	r9, r25
    1298:	b0 f4       	brcc	.+44     	; 0x12c6 <vfprintf+0x1c2>
    129a:	b6 01       	movw	r22, r12
    129c:	80 e2       	ldi	r24, 0x20	; 32
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <fputc>
    12a4:	2a 94       	dec	r2
    12a6:	f4 cf       	rjmp	.-24     	; 0x1290 <vfprintf+0x18c>
    12a8:	f5 01       	movw	r30, r10
    12aa:	37 fc       	sbrc	r3, 7
    12ac:	85 91       	lpm	r24, Z+
    12ae:	37 fe       	sbrs	r3, 7
    12b0:	81 91       	ld	r24, Z+
    12b2:	5f 01       	movw	r10, r30
    12b4:	b6 01       	movw	r22, r12
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <fputc>
    12bc:	21 10       	cpse	r2, r1
    12be:	2a 94       	dec	r2
    12c0:	21 e0       	ldi	r18, 0x01	; 1
    12c2:	82 1a       	sub	r8, r18
    12c4:	91 08       	sbc	r9, r1
    12c6:	81 14       	cp	r8, r1
    12c8:	91 04       	cpc	r9, r1
    12ca:	71 f7       	brne	.-36     	; 0x12a8 <vfprintf+0x1a4>
    12cc:	e8 c0       	rjmp	.+464    	; 0x149e <vfprintf+0x39a>
    12ce:	84 36       	cpi	r24, 0x64	; 100
    12d0:	11 f0       	breq	.+4      	; 0x12d6 <vfprintf+0x1d2>
    12d2:	89 36       	cpi	r24, 0x69	; 105
    12d4:	41 f5       	brne	.+80     	; 0x1326 <vfprintf+0x222>
    12d6:	f8 01       	movw	r30, r16
    12d8:	37 fe       	sbrs	r3, 7
    12da:	07 c0       	rjmp	.+14     	; 0x12ea <vfprintf+0x1e6>
    12dc:	60 81       	ld	r22, Z
    12de:	71 81       	ldd	r23, Z+1	; 0x01
    12e0:	82 81       	ldd	r24, Z+2	; 0x02
    12e2:	93 81       	ldd	r25, Z+3	; 0x03
    12e4:	0c 5f       	subi	r16, 0xFC	; 252
    12e6:	1f 4f       	sbci	r17, 0xFF	; 255
    12e8:	08 c0       	rjmp	.+16     	; 0x12fa <vfprintf+0x1f6>
    12ea:	60 81       	ld	r22, Z
    12ec:	71 81       	ldd	r23, Z+1	; 0x01
    12ee:	07 2e       	mov	r0, r23
    12f0:	00 0c       	add	r0, r0
    12f2:	88 0b       	sbc	r24, r24
    12f4:	99 0b       	sbc	r25, r25
    12f6:	0e 5f       	subi	r16, 0xFE	; 254
    12f8:	1f 4f       	sbci	r17, 0xFF	; 255
    12fa:	f3 2d       	mov	r31, r3
    12fc:	ff 76       	andi	r31, 0x6F	; 111
    12fe:	3f 2e       	mov	r3, r31
    1300:	97 ff       	sbrs	r25, 7
    1302:	09 c0       	rjmp	.+18     	; 0x1316 <vfprintf+0x212>
    1304:	90 95       	com	r25
    1306:	80 95       	com	r24
    1308:	70 95       	com	r23
    130a:	61 95       	neg	r22
    130c:	7f 4f       	sbci	r23, 0xFF	; 255
    130e:	8f 4f       	sbci	r24, 0xFF	; 255
    1310:	9f 4f       	sbci	r25, 0xFF	; 255
    1312:	f0 68       	ori	r31, 0x80	; 128
    1314:	3f 2e       	mov	r3, r31
    1316:	2a e0       	ldi	r18, 0x0A	; 10
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	a3 01       	movw	r20, r6
    131c:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__ultoa_invert>
    1320:	88 2e       	mov	r8, r24
    1322:	86 18       	sub	r8, r6
    1324:	45 c0       	rjmp	.+138    	; 0x13b0 <vfprintf+0x2ac>
    1326:	85 37       	cpi	r24, 0x75	; 117
    1328:	31 f4       	brne	.+12     	; 0x1336 <vfprintf+0x232>
    132a:	23 2d       	mov	r18, r3
    132c:	2f 7e       	andi	r18, 0xEF	; 239
    132e:	b2 2e       	mov	r11, r18
    1330:	2a e0       	ldi	r18, 0x0A	; 10
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	25 c0       	rjmp	.+74     	; 0x1380 <vfprintf+0x27c>
    1336:	93 2d       	mov	r25, r3
    1338:	99 7f       	andi	r25, 0xF9	; 249
    133a:	b9 2e       	mov	r11, r25
    133c:	8f 36       	cpi	r24, 0x6F	; 111
    133e:	c1 f0       	breq	.+48     	; 0x1370 <vfprintf+0x26c>
    1340:	18 f4       	brcc	.+6      	; 0x1348 <vfprintf+0x244>
    1342:	88 35       	cpi	r24, 0x58	; 88
    1344:	79 f0       	breq	.+30     	; 0x1364 <vfprintf+0x260>
    1346:	b5 c0       	rjmp	.+362    	; 0x14b2 <vfprintf+0x3ae>
    1348:	80 37       	cpi	r24, 0x70	; 112
    134a:	19 f0       	breq	.+6      	; 0x1352 <vfprintf+0x24e>
    134c:	88 37       	cpi	r24, 0x78	; 120
    134e:	21 f0       	breq	.+8      	; 0x1358 <vfprintf+0x254>
    1350:	b0 c0       	rjmp	.+352    	; 0x14b2 <vfprintf+0x3ae>
    1352:	e9 2f       	mov	r30, r25
    1354:	e0 61       	ori	r30, 0x10	; 16
    1356:	be 2e       	mov	r11, r30
    1358:	b4 fe       	sbrs	r11, 4
    135a:	0d c0       	rjmp	.+26     	; 0x1376 <vfprintf+0x272>
    135c:	fb 2d       	mov	r31, r11
    135e:	f4 60       	ori	r31, 0x04	; 4
    1360:	bf 2e       	mov	r11, r31
    1362:	09 c0       	rjmp	.+18     	; 0x1376 <vfprintf+0x272>
    1364:	34 fe       	sbrs	r3, 4
    1366:	0a c0       	rjmp	.+20     	; 0x137c <vfprintf+0x278>
    1368:	29 2f       	mov	r18, r25
    136a:	26 60       	ori	r18, 0x06	; 6
    136c:	b2 2e       	mov	r11, r18
    136e:	06 c0       	rjmp	.+12     	; 0x137c <vfprintf+0x278>
    1370:	28 e0       	ldi	r18, 0x08	; 8
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	05 c0       	rjmp	.+10     	; 0x1380 <vfprintf+0x27c>
    1376:	20 e1       	ldi	r18, 0x10	; 16
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <vfprintf+0x27c>
    137c:	20 e1       	ldi	r18, 0x10	; 16
    137e:	32 e0       	ldi	r19, 0x02	; 2
    1380:	f8 01       	movw	r30, r16
    1382:	b7 fe       	sbrs	r11, 7
    1384:	07 c0       	rjmp	.+14     	; 0x1394 <vfprintf+0x290>
    1386:	60 81       	ld	r22, Z
    1388:	71 81       	ldd	r23, Z+1	; 0x01
    138a:	82 81       	ldd	r24, Z+2	; 0x02
    138c:	93 81       	ldd	r25, Z+3	; 0x03
    138e:	0c 5f       	subi	r16, 0xFC	; 252
    1390:	1f 4f       	sbci	r17, 0xFF	; 255
    1392:	06 c0       	rjmp	.+12     	; 0x13a0 <vfprintf+0x29c>
    1394:	60 81       	ld	r22, Z
    1396:	71 81       	ldd	r23, Z+1	; 0x01
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	0e 5f       	subi	r16, 0xFE	; 254
    139e:	1f 4f       	sbci	r17, 0xFF	; 255
    13a0:	a3 01       	movw	r20, r6
    13a2:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__ultoa_invert>
    13a6:	88 2e       	mov	r8, r24
    13a8:	86 18       	sub	r8, r6
    13aa:	fb 2d       	mov	r31, r11
    13ac:	ff 77       	andi	r31, 0x7F	; 127
    13ae:	3f 2e       	mov	r3, r31
    13b0:	36 fe       	sbrs	r3, 6
    13b2:	0d c0       	rjmp	.+26     	; 0x13ce <vfprintf+0x2ca>
    13b4:	23 2d       	mov	r18, r3
    13b6:	2e 7f       	andi	r18, 0xFE	; 254
    13b8:	a2 2e       	mov	r10, r18
    13ba:	89 14       	cp	r8, r9
    13bc:	58 f4       	brcc	.+22     	; 0x13d4 <vfprintf+0x2d0>
    13be:	34 fe       	sbrs	r3, 4
    13c0:	0b c0       	rjmp	.+22     	; 0x13d8 <vfprintf+0x2d4>
    13c2:	32 fc       	sbrc	r3, 2
    13c4:	09 c0       	rjmp	.+18     	; 0x13d8 <vfprintf+0x2d4>
    13c6:	83 2d       	mov	r24, r3
    13c8:	8e 7e       	andi	r24, 0xEE	; 238
    13ca:	a8 2e       	mov	r10, r24
    13cc:	05 c0       	rjmp	.+10     	; 0x13d8 <vfprintf+0x2d4>
    13ce:	b8 2c       	mov	r11, r8
    13d0:	a3 2c       	mov	r10, r3
    13d2:	03 c0       	rjmp	.+6      	; 0x13da <vfprintf+0x2d6>
    13d4:	b8 2c       	mov	r11, r8
    13d6:	01 c0       	rjmp	.+2      	; 0x13da <vfprintf+0x2d6>
    13d8:	b9 2c       	mov	r11, r9
    13da:	a4 fe       	sbrs	r10, 4
    13dc:	0f c0       	rjmp	.+30     	; 0x13fc <vfprintf+0x2f8>
    13de:	fe 01       	movw	r30, r28
    13e0:	e8 0d       	add	r30, r8
    13e2:	f1 1d       	adc	r31, r1
    13e4:	80 81       	ld	r24, Z
    13e6:	80 33       	cpi	r24, 0x30	; 48
    13e8:	21 f4       	brne	.+8      	; 0x13f2 <vfprintf+0x2ee>
    13ea:	9a 2d       	mov	r25, r10
    13ec:	99 7e       	andi	r25, 0xE9	; 233
    13ee:	a9 2e       	mov	r10, r25
    13f0:	09 c0       	rjmp	.+18     	; 0x1404 <vfprintf+0x300>
    13f2:	a2 fe       	sbrs	r10, 2
    13f4:	06 c0       	rjmp	.+12     	; 0x1402 <vfprintf+0x2fe>
    13f6:	b3 94       	inc	r11
    13f8:	b3 94       	inc	r11
    13fa:	04 c0       	rjmp	.+8      	; 0x1404 <vfprintf+0x300>
    13fc:	8a 2d       	mov	r24, r10
    13fe:	86 78       	andi	r24, 0x86	; 134
    1400:	09 f0       	breq	.+2      	; 0x1404 <vfprintf+0x300>
    1402:	b3 94       	inc	r11
    1404:	a3 fc       	sbrc	r10, 3
    1406:	11 c0       	rjmp	.+34     	; 0x142a <vfprintf+0x326>
    1408:	a0 fe       	sbrs	r10, 0
    140a:	06 c0       	rjmp	.+12     	; 0x1418 <vfprintf+0x314>
    140c:	b2 14       	cp	r11, r2
    140e:	88 f4       	brcc	.+34     	; 0x1432 <vfprintf+0x32e>
    1410:	28 0c       	add	r2, r8
    1412:	92 2c       	mov	r9, r2
    1414:	9b 18       	sub	r9, r11
    1416:	0e c0       	rjmp	.+28     	; 0x1434 <vfprintf+0x330>
    1418:	b2 14       	cp	r11, r2
    141a:	60 f4       	brcc	.+24     	; 0x1434 <vfprintf+0x330>
    141c:	b6 01       	movw	r22, r12
    141e:	80 e2       	ldi	r24, 0x20	; 32
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <fputc>
    1426:	b3 94       	inc	r11
    1428:	f7 cf       	rjmp	.-18     	; 0x1418 <vfprintf+0x314>
    142a:	b2 14       	cp	r11, r2
    142c:	18 f4       	brcc	.+6      	; 0x1434 <vfprintf+0x330>
    142e:	2b 18       	sub	r2, r11
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <vfprintf+0x332>
    1432:	98 2c       	mov	r9, r8
    1434:	21 2c       	mov	r2, r1
    1436:	a4 fe       	sbrs	r10, 4
    1438:	10 c0       	rjmp	.+32     	; 0x145a <vfprintf+0x356>
    143a:	b6 01       	movw	r22, r12
    143c:	80 e3       	ldi	r24, 0x30	; 48
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <fputc>
    1444:	a2 fe       	sbrs	r10, 2
    1446:	17 c0       	rjmp	.+46     	; 0x1476 <vfprintf+0x372>
    1448:	a1 fc       	sbrc	r10, 1
    144a:	03 c0       	rjmp	.+6      	; 0x1452 <vfprintf+0x34e>
    144c:	88 e7       	ldi	r24, 0x78	; 120
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <vfprintf+0x352>
    1452:	88 e5       	ldi	r24, 0x58	; 88
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	b6 01       	movw	r22, r12
    1458:	0c c0       	rjmp	.+24     	; 0x1472 <vfprintf+0x36e>
    145a:	8a 2d       	mov	r24, r10
    145c:	86 78       	andi	r24, 0x86	; 134
    145e:	59 f0       	breq	.+22     	; 0x1476 <vfprintf+0x372>
    1460:	a1 fe       	sbrs	r10, 1
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <vfprintf+0x364>
    1464:	8b e2       	ldi	r24, 0x2B	; 43
    1466:	01 c0       	rjmp	.+2      	; 0x146a <vfprintf+0x366>
    1468:	80 e2       	ldi	r24, 0x20	; 32
    146a:	a7 fc       	sbrc	r10, 7
    146c:	8d e2       	ldi	r24, 0x2D	; 45
    146e:	b6 01       	movw	r22, r12
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <fputc>
    1476:	89 14       	cp	r8, r9
    1478:	38 f4       	brcc	.+14     	; 0x1488 <vfprintf+0x384>
    147a:	b6 01       	movw	r22, r12
    147c:	80 e3       	ldi	r24, 0x30	; 48
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <fputc>
    1484:	9a 94       	dec	r9
    1486:	f7 cf       	rjmp	.-18     	; 0x1476 <vfprintf+0x372>
    1488:	8a 94       	dec	r8
    148a:	f3 01       	movw	r30, r6
    148c:	e8 0d       	add	r30, r8
    148e:	f1 1d       	adc	r31, r1
    1490:	80 81       	ld	r24, Z
    1492:	b6 01       	movw	r22, r12
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <fputc>
    149a:	81 10       	cpse	r8, r1
    149c:	f5 cf       	rjmp	.-22     	; 0x1488 <vfprintf+0x384>
    149e:	22 20       	and	r2, r2
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <vfprintf+0x3a0>
    14a2:	42 ce       	rjmp	.-892    	; 0x1128 <vfprintf+0x24>
    14a4:	b6 01       	movw	r22, r12
    14a6:	80 e2       	ldi	r24, 0x20	; 32
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <fputc>
    14ae:	2a 94       	dec	r2
    14b0:	f6 cf       	rjmp	.-20     	; 0x149e <vfprintf+0x39a>
    14b2:	f6 01       	movw	r30, r12
    14b4:	86 81       	ldd	r24, Z+6	; 0x06
    14b6:	97 81       	ldd	r25, Z+7	; 0x07
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <vfprintf+0x3ba>
    14ba:	8f ef       	ldi	r24, 0xFF	; 255
    14bc:	9f ef       	ldi	r25, 0xFF	; 255
    14be:	2b 96       	adiw	r28, 0x0b	; 11
    14c0:	e2 e1       	ldi	r30, 0x12	; 18
    14c2:	0c 94 4a 0e 	jmp	0x1c94	; 0x1c94 <__epilogue_restores__>

000014c6 <putval>:
    14c6:	20 fd       	sbrc	r18, 0
    14c8:	09 c0       	rjmp	.+18     	; 0x14dc <putval+0x16>
    14ca:	fc 01       	movw	r30, r24
    14cc:	23 fd       	sbrc	r18, 3
    14ce:	05 c0       	rjmp	.+10     	; 0x14da <putval+0x14>
    14d0:	22 ff       	sbrs	r18, 2
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <putval+0x12>
    14d4:	73 83       	std	Z+3, r23	; 0x03
    14d6:	62 83       	std	Z+2, r22	; 0x02
    14d8:	51 83       	std	Z+1, r21	; 0x01
    14da:	40 83       	st	Z, r20
    14dc:	08 95       	ret

000014de <mulacc>:
    14de:	44 fd       	sbrc	r20, 4
    14e0:	17 c0       	rjmp	.+46     	; 0x1510 <mulacc+0x32>
    14e2:	46 fd       	sbrc	r20, 6
    14e4:	17 c0       	rjmp	.+46     	; 0x1514 <mulacc+0x36>
    14e6:	ab 01       	movw	r20, r22
    14e8:	bc 01       	movw	r22, r24
    14ea:	da 01       	movw	r26, r20
    14ec:	fb 01       	movw	r30, r22
    14ee:	aa 0f       	add	r26, r26
    14f0:	bb 1f       	adc	r27, r27
    14f2:	ee 1f       	adc	r30, r30
    14f4:	ff 1f       	adc	r31, r31
    14f6:	10 94       	com	r1
    14f8:	d1 f7       	brne	.-12     	; 0x14ee <mulacc+0x10>
    14fa:	4a 0f       	add	r20, r26
    14fc:	5b 1f       	adc	r21, r27
    14fe:	6e 1f       	adc	r22, r30
    1500:	7f 1f       	adc	r23, r31
    1502:	cb 01       	movw	r24, r22
    1504:	ba 01       	movw	r22, r20
    1506:	66 0f       	add	r22, r22
    1508:	77 1f       	adc	r23, r23
    150a:	88 1f       	adc	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	09 c0       	rjmp	.+18     	; 0x1522 <mulacc+0x44>
    1510:	33 e0       	ldi	r19, 0x03	; 3
    1512:	01 c0       	rjmp	.+2      	; 0x1516 <mulacc+0x38>
    1514:	34 e0       	ldi	r19, 0x04	; 4
    1516:	66 0f       	add	r22, r22
    1518:	77 1f       	adc	r23, r23
    151a:	88 1f       	adc	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	31 50       	subi	r19, 0x01	; 1
    1520:	d1 f7       	brne	.-12     	; 0x1516 <mulacc+0x38>
    1522:	62 0f       	add	r22, r18
    1524:	71 1d       	adc	r23, r1
    1526:	81 1d       	adc	r24, r1
    1528:	91 1d       	adc	r25, r1
    152a:	08 95       	ret

0000152c <skip_spaces>:
    152c:	0f 93       	push	r16
    152e:	1f 93       	push	r17
    1530:	cf 93       	push	r28
    1532:	df 93       	push	r29
    1534:	8c 01       	movw	r16, r24
    1536:	c8 01       	movw	r24, r16
    1538:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <fgetc>
    153c:	ec 01       	movw	r28, r24
    153e:	97 fd       	sbrc	r25, 7
    1540:	08 c0       	rjmp	.+16     	; 0x1552 <skip_spaces+0x26>
    1542:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <isspace>
    1546:	89 2b       	or	r24, r25
    1548:	b1 f7       	brne	.-20     	; 0x1536 <skip_spaces+0xa>
    154a:	b8 01       	movw	r22, r16
    154c:	ce 01       	movw	r24, r28
    154e:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <ungetc>
    1552:	ce 01       	movw	r24, r28
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	1f 91       	pop	r17
    155a:	0f 91       	pop	r16
    155c:	08 95       	ret

0000155e <conv_int>:
    155e:	8f 92       	push	r8
    1560:	9f 92       	push	r9
    1562:	af 92       	push	r10
    1564:	bf 92       	push	r11
    1566:	ef 92       	push	r14
    1568:	ff 92       	push	r15
    156a:	0f 93       	push	r16
    156c:	1f 93       	push	r17
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	8c 01       	movw	r16, r24
    1574:	d6 2f       	mov	r29, r22
    1576:	7a 01       	movw	r14, r20
    1578:	b2 2e       	mov	r11, r18
    157a:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <fgetc>
    157e:	9c 01       	movw	r18, r24
    1580:	33 27       	eor	r19, r19
    1582:	2b 32       	cpi	r18, 0x2B	; 43
    1584:	31 05       	cpc	r19, r1
    1586:	31 f0       	breq	.+12     	; 0x1594 <conv_int+0x36>
    1588:	2d 32       	cpi	r18, 0x2D	; 45
    158a:	31 05       	cpc	r19, r1
    158c:	61 f4       	brne	.+24     	; 0x15a6 <conv_int+0x48>
    158e:	8b 2d       	mov	r24, r11
    1590:	80 68       	ori	r24, 0x80	; 128
    1592:	b8 2e       	mov	r11, r24
    1594:	d1 50       	subi	r29, 0x01	; 1
    1596:	11 f4       	brne	.+4      	; 0x159c <conv_int+0x3e>
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	68 c0       	rjmp	.+208    	; 0x166c <conv_int+0x10e>
    159c:	c8 01       	movw	r24, r16
    159e:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <fgetc>
    15a2:	97 fd       	sbrc	r25, 7
    15a4:	f9 cf       	rjmp	.-14     	; 0x1598 <conv_int+0x3a>
    15a6:	cb 2d       	mov	r28, r11
    15a8:	cd 7f       	andi	r28, 0xFD	; 253
    15aa:	2b 2d       	mov	r18, r11
    15ac:	20 73       	andi	r18, 0x30	; 48
    15ae:	09 f5       	brne	.+66     	; 0x15f2 <conv_int+0x94>
    15b0:	80 33       	cpi	r24, 0x30	; 48
    15b2:	f9 f4       	brne	.+62     	; 0x15f2 <conv_int+0x94>
    15b4:	aa 24       	eor	r10, r10
    15b6:	aa 94       	dec	r10
    15b8:	ad 0e       	add	r10, r29
    15ba:	09 f4       	brne	.+2      	; 0x15be <conv_int+0x60>
    15bc:	43 c0       	rjmp	.+134    	; 0x1644 <conv_int+0xe6>
    15be:	c8 01       	movw	r24, r16
    15c0:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <fgetc>
    15c4:	97 fd       	sbrc	r25, 7
    15c6:	3e c0       	rjmp	.+124    	; 0x1644 <conv_int+0xe6>
    15c8:	9c 01       	movw	r18, r24
    15ca:	2f 7d       	andi	r18, 0xDF	; 223
    15cc:	33 27       	eor	r19, r19
    15ce:	28 35       	cpi	r18, 0x58	; 88
    15d0:	31 05       	cpc	r19, r1
    15d2:	49 f4       	brne	.+18     	; 0x15e6 <conv_int+0x88>
    15d4:	c2 64       	ori	r28, 0x42	; 66
    15d6:	d2 50       	subi	r29, 0x02	; 2
    15d8:	a9 f1       	breq	.+106    	; 0x1644 <conv_int+0xe6>
    15da:	c8 01       	movw	r24, r16
    15dc:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <fgetc>
    15e0:	97 ff       	sbrs	r25, 7
    15e2:	07 c0       	rjmp	.+14     	; 0x15f2 <conv_int+0x94>
    15e4:	2f c0       	rjmp	.+94     	; 0x1644 <conv_int+0xe6>
    15e6:	b6 fe       	sbrs	r11, 6
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <conv_int+0x90>
    15ea:	c2 60       	ori	r28, 0x02	; 2
    15ec:	01 c0       	rjmp	.+2      	; 0x15f0 <conv_int+0x92>
    15ee:	c2 61       	ori	r28, 0x12	; 18
    15f0:	da 2d       	mov	r29, r10
    15f2:	81 2c       	mov	r8, r1
    15f4:	91 2c       	mov	r9, r1
    15f6:	54 01       	movw	r10, r8
    15f8:	20 ed       	ldi	r18, 0xD0	; 208
    15fa:	28 0f       	add	r18, r24
    15fc:	28 30       	cpi	r18, 0x08	; 8
    15fe:	80 f0       	brcs	.+32     	; 0x1620 <conv_int+0xc2>
    1600:	c4 ff       	sbrs	r28, 4
    1602:	04 c0       	rjmp	.+8      	; 0x160c <conv_int+0xae>
    1604:	b8 01       	movw	r22, r16
    1606:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <ungetc>
    160a:	19 c0       	rjmp	.+50     	; 0x163e <conv_int+0xe0>
    160c:	2a 30       	cpi	r18, 0x0A	; 10
    160e:	40 f0       	brcs	.+16     	; 0x1620 <conv_int+0xc2>
    1610:	c6 ff       	sbrs	r28, 6
    1612:	f8 cf       	rjmp	.-16     	; 0x1604 <conv_int+0xa6>
    1614:	2f 7d       	andi	r18, 0xDF	; 223
    1616:	3f ee       	ldi	r19, 0xEF	; 239
    1618:	32 0f       	add	r19, r18
    161a:	36 30       	cpi	r19, 0x06	; 6
    161c:	98 f7       	brcc	.-26     	; 0x1604 <conv_int+0xa6>
    161e:	27 50       	subi	r18, 0x07	; 7
    1620:	4c 2f       	mov	r20, r28
    1622:	c5 01       	movw	r24, r10
    1624:	b4 01       	movw	r22, r8
    1626:	0e 94 6f 0a 	call	0x14de	; 0x14de <mulacc>
    162a:	4b 01       	movw	r8, r22
    162c:	5c 01       	movw	r10, r24
    162e:	c2 60       	ori	r28, 0x02	; 2
    1630:	d1 50       	subi	r29, 0x01	; 1
    1632:	59 f0       	breq	.+22     	; 0x164a <conv_int+0xec>
    1634:	c8 01       	movw	r24, r16
    1636:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <fgetc>
    163a:	97 ff       	sbrs	r25, 7
    163c:	dd cf       	rjmp	.-70     	; 0x15f8 <conv_int+0x9a>
    163e:	c1 fd       	sbrc	r28, 1
    1640:	04 c0       	rjmp	.+8      	; 0x164a <conv_int+0xec>
    1642:	aa cf       	rjmp	.-172    	; 0x1598 <conv_int+0x3a>
    1644:	81 2c       	mov	r8, r1
    1646:	91 2c       	mov	r9, r1
    1648:	54 01       	movw	r10, r8
    164a:	c7 ff       	sbrs	r28, 7
    164c:	08 c0       	rjmp	.+16     	; 0x165e <conv_int+0x100>
    164e:	b0 94       	com	r11
    1650:	a0 94       	com	r10
    1652:	90 94       	com	r9
    1654:	80 94       	com	r8
    1656:	81 1c       	adc	r8, r1
    1658:	91 1c       	adc	r9, r1
    165a:	a1 1c       	adc	r10, r1
    165c:	b1 1c       	adc	r11, r1
    165e:	2c 2f       	mov	r18, r28
    1660:	b5 01       	movw	r22, r10
    1662:	a4 01       	movw	r20, r8
    1664:	c7 01       	movw	r24, r14
    1666:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <putval>
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	df 91       	pop	r29
    166e:	cf 91       	pop	r28
    1670:	1f 91       	pop	r17
    1672:	0f 91       	pop	r16
    1674:	ff 90       	pop	r15
    1676:	ef 90       	pop	r14
    1678:	bf 90       	pop	r11
    167a:	af 90       	pop	r10
    167c:	9f 90       	pop	r9
    167e:	8f 90       	pop	r8
    1680:	08 95       	ret

00001682 <conv_brk>:
    1682:	a0 e2       	ldi	r26, 0x20	; 32
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e7 e4       	ldi	r30, 0x47	; 71
    1688:	fb e0       	ldi	r31, 0x0B	; 11
    168a:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__prologue_saves__+0x6>
    168e:	5c 01       	movw	r10, r24
    1690:	96 2e       	mov	r9, r22
    1692:	7a 01       	movw	r14, r20
    1694:	f9 01       	movw	r30, r18
    1696:	8e 01       	movw	r16, r28
    1698:	0f 5f       	subi	r16, 0xFF	; 255
    169a:	1f 4f       	sbci	r17, 0xFF	; 255
    169c:	68 01       	movw	r12, r16
    169e:	80 e2       	ldi	r24, 0x20	; 32
    16a0:	d8 01       	movw	r26, r16
    16a2:	1d 92       	st	X+, r1
    16a4:	8a 95       	dec	r24
    16a6:	e9 f7       	brne	.-6      	; 0x16a2 <conv_brk+0x20>
    16a8:	d5 01       	movw	r26, r10
    16aa:	13 96       	adiw	r26, 0x03	; 3
    16ac:	8c 90       	ld	r8, X
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	61 2c       	mov	r6, r1
    16b4:	71 2c       	mov	r7, r1
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	61 e0       	ldi	r22, 0x01	; 1
    16ba:	70 e0       	ldi	r23, 0x00	; 0
    16bc:	83 fc       	sbrc	r8, 3
    16be:	25 91       	lpm	r18, Z+
    16c0:	83 fe       	sbrs	r8, 3
    16c2:	21 91       	ld	r18, Z+
    16c4:	8f 01       	movw	r16, r30
    16c6:	52 2e       	mov	r5, r18
    16c8:	21 11       	cpse	r18, r1
    16ca:	03 c0       	rjmp	.+6      	; 0x16d2 <conv_brk+0x50>
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	92 c0       	rjmp	.+292    	; 0x17f6 <conv_brk+0x174>
    16d2:	2e 35       	cpi	r18, 0x5E	; 94
    16d4:	11 f4       	brne	.+4      	; 0x16da <conv_brk+0x58>
    16d6:	00 97       	sbiw	r24, 0x00	; 0
    16d8:	51 f1       	breq	.+84     	; 0x172e <conv_brk+0xac>
    16da:	43 2f       	mov	r20, r19
    16dc:	50 e0       	ldi	r21, 0x00	; 0
    16de:	48 17       	cp	r20, r24
    16e0:	59 07       	cpc	r21, r25
    16e2:	3c f4       	brge	.+14     	; 0x16f2 <conv_brk+0x70>
    16e4:	2d 35       	cpi	r18, 0x5D	; 93
    16e6:	59 f1       	breq	.+86     	; 0x173e <conv_brk+0xbc>
    16e8:	2d 32       	cpi	r18, 0x2D	; 45
    16ea:	19 f4       	brne	.+6      	; 0x16f2 <conv_brk+0x70>
    16ec:	77 20       	and	r7, r7
    16ee:	09 f1       	breq	.+66     	; 0x1732 <conv_brk+0xb0>
    16f0:	03 c0       	rjmp	.+6      	; 0x16f8 <conv_brk+0x76>
    16f2:	77 20       	and	r7, r7
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <conv_brk+0x76>
    16f6:	6a c0       	rjmp	.+212    	; 0x17cc <conv_brk+0x14a>
    16f8:	45 2d       	mov	r20, r5
    16fa:	46 95       	lsr	r20
    16fc:	46 95       	lsr	r20
    16fe:	46 95       	lsr	r20
    1700:	d6 01       	movw	r26, r12
    1702:	a4 0f       	add	r26, r20
    1704:	b1 1d       	adc	r27, r1
    1706:	45 2d       	mov	r20, r5
    1708:	47 70       	andi	r20, 0x07	; 7
    170a:	8b 01       	movw	r16, r22
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <conv_brk+0x90>
    170e:	00 0f       	add	r16, r16
    1710:	11 1f       	adc	r17, r17
    1712:	4a 95       	dec	r20
    1714:	e2 f7       	brpl	.-8      	; 0x170e <conv_brk+0x8c>
    1716:	a8 01       	movw	r20, r16
    1718:	5c 91       	ld	r21, X
    171a:	45 2b       	or	r20, r21
    171c:	4c 93       	st	X, r20
    171e:	65 14       	cp	r6, r5
    1720:	59 f0       	breq	.+22     	; 0x1738 <conv_brk+0xb6>
    1722:	56 14       	cp	r5, r6
    1724:	10 f4       	brcc	.+4      	; 0x172a <conv_brk+0xa8>
    1726:	53 94       	inc	r5
    1728:	e7 cf       	rjmp	.-50     	; 0x16f8 <conv_brk+0x76>
    172a:	5a 94       	dec	r5
    172c:	e5 cf       	rjmp	.-54     	; 0x16f8 <conv_brk+0x76>
    172e:	31 e0       	ldi	r19, 0x01	; 1
    1730:	04 c0       	rjmp	.+8      	; 0x173a <conv_brk+0xb8>
    1732:	77 24       	eor	r7, r7
    1734:	73 94       	inc	r7
    1736:	01 c0       	rjmp	.+2      	; 0x173a <conv_brk+0xb8>
    1738:	71 2c       	mov	r7, r1
    173a:	01 96       	adiw	r24, 0x01	; 1
    173c:	bf cf       	rjmp	.-130    	; 0x16bc <conv_brk+0x3a>
    173e:	77 20       	and	r7, r7
    1740:	19 f0       	breq	.+6      	; 0x1748 <conv_brk+0xc6>
    1742:	8e 81       	ldd	r24, Y+6	; 0x06
    1744:	80 62       	ori	r24, 0x20	; 32
    1746:	8e 83       	std	Y+6, r24	; 0x06
    1748:	31 11       	cpse	r19, r1
    174a:	03 c0       	rjmp	.+6      	; 0x1752 <conv_brk+0xd0>
    174c:	88 24       	eor	r8, r8
    174e:	83 94       	inc	r8
    1750:	17 c0       	rjmp	.+46     	; 0x1780 <conv_brk+0xfe>
    1752:	f6 01       	movw	r30, r12
    1754:	9e 01       	movw	r18, r28
    1756:	2f 5d       	subi	r18, 0xDF	; 223
    1758:	3f 4f       	sbci	r19, 0xFF	; 255
    175a:	80 81       	ld	r24, Z
    175c:	80 95       	com	r24
    175e:	81 93       	st	Z+, r24
    1760:	2e 17       	cp	r18, r30
    1762:	3f 07       	cpc	r19, r31
    1764:	d1 f7       	brne	.-12     	; 0x175a <conv_brk+0xd8>
    1766:	f2 cf       	rjmp	.-28     	; 0x174c <conv_brk+0xca>
    1768:	e1 14       	cp	r14, r1
    176a:	f1 04       	cpc	r15, r1
    176c:	29 f0       	breq	.+10     	; 0x1778 <conv_brk+0xf6>
    176e:	d7 01       	movw	r26, r14
    1770:	8c 93       	st	X, r24
    1772:	f7 01       	movw	r30, r14
    1774:	31 96       	adiw	r30, 0x01	; 1
    1776:	7f 01       	movw	r14, r30
    1778:	9a 94       	dec	r9
    177a:	81 2c       	mov	r8, r1
    177c:	99 20       	and	r9, r9
    177e:	f9 f0       	breq	.+62     	; 0x17be <conv_brk+0x13c>
    1780:	c5 01       	movw	r24, r10
    1782:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <fgetc>
    1786:	97 fd       	sbrc	r25, 7
    1788:	18 c0       	rjmp	.+48     	; 0x17ba <conv_brk+0x138>
    178a:	fc 01       	movw	r30, r24
    178c:	ff 27       	eor	r31, r31
    178e:	23 e0       	ldi	r18, 0x03	; 3
    1790:	f5 95       	asr	r31
    1792:	e7 95       	ror	r30
    1794:	2a 95       	dec	r18
    1796:	e1 f7       	brne	.-8      	; 0x1790 <conv_brk+0x10e>
    1798:	ec 0d       	add	r30, r12
    179a:	fd 1d       	adc	r31, r13
    179c:	20 81       	ld	r18, Z
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	ac 01       	movw	r20, r24
    17a2:	47 70       	andi	r20, 0x07	; 7
    17a4:	55 27       	eor	r21, r21
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <conv_brk+0x12a>
    17a8:	35 95       	asr	r19
    17aa:	27 95       	ror	r18
    17ac:	4a 95       	dec	r20
    17ae:	e2 f7       	brpl	.-8      	; 0x17a8 <conv_brk+0x126>
    17b0:	20 fd       	sbrc	r18, 0
    17b2:	da cf       	rjmp	.-76     	; 0x1768 <conv_brk+0xe6>
    17b4:	b5 01       	movw	r22, r10
    17b6:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <ungetc>
    17ba:	81 10       	cpse	r8, r1
    17bc:	87 cf       	rjmp	.-242    	; 0x16cc <conv_brk+0x4a>
    17be:	e1 14       	cp	r14, r1
    17c0:	f1 04       	cpc	r15, r1
    17c2:	11 f0       	breq	.+4      	; 0x17c8 <conv_brk+0x146>
    17c4:	d7 01       	movw	r26, r14
    17c6:	1c 92       	st	X, r1
    17c8:	c8 01       	movw	r24, r16
    17ca:	15 c0       	rjmp	.+42     	; 0x17f6 <conv_brk+0x174>
    17cc:	42 2f       	mov	r20, r18
    17ce:	46 95       	lsr	r20
    17d0:	46 95       	lsr	r20
    17d2:	46 95       	lsr	r20
    17d4:	d6 01       	movw	r26, r12
    17d6:	a4 0f       	add	r26, r20
    17d8:	b1 1d       	adc	r27, r1
    17da:	42 2f       	mov	r20, r18
    17dc:	47 70       	andi	r20, 0x07	; 7
    17de:	8b 01       	movw	r16, r22
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <conv_brk+0x164>
    17e2:	00 0f       	add	r16, r16
    17e4:	11 1f       	adc	r17, r17
    17e6:	4a 95       	dec	r20
    17e8:	e2 f7       	brpl	.-8      	; 0x17e2 <conv_brk+0x160>
    17ea:	a8 01       	movw	r20, r16
    17ec:	5c 91       	ld	r21, X
    17ee:	45 2b       	or	r20, r21
    17f0:	4c 93       	st	X, r20
    17f2:	62 2e       	mov	r6, r18
    17f4:	a2 cf       	rjmp	.-188    	; 0x173a <conv_brk+0xb8>
    17f6:	a0 96       	adiw	r28, 0x20	; 32
    17f8:	ef e0       	ldi	r30, 0x0F	; 15
    17fa:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <__epilogue_restores__+0x6>

000017fe <vfscanf>:
    17fe:	a0 e0       	ldi	r26, 0x00	; 0
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e5 e0       	ldi	r30, 0x05	; 5
    1804:	fc e0       	ldi	r31, 0x0C	; 12
    1806:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__prologue_saves__+0x6>
    180a:	6c 01       	movw	r12, r24
    180c:	eb 01       	movw	r28, r22
    180e:	5a 01       	movw	r10, r20
    1810:	fc 01       	movw	r30, r24
    1812:	17 82       	std	Z+7, r1	; 0x07
    1814:	16 82       	std	Z+6, r1	; 0x06
    1816:	51 2c       	mov	r5, r1
    1818:	f6 01       	movw	r30, r12
    181a:	e3 80       	ldd	r14, Z+3	; 0x03
    181c:	fe 01       	movw	r30, r28
    181e:	e3 fc       	sbrc	r14, 3
    1820:	85 91       	lpm	r24, Z+
    1822:	e3 fe       	sbrs	r14, 3
    1824:	81 91       	ld	r24, Z+
    1826:	18 2f       	mov	r17, r24
    1828:	ef 01       	movw	r28, r30
    182a:	88 23       	and	r24, r24
    182c:	09 f4       	brne	.+2      	; 0x1830 <vfscanf+0x32>
    182e:	ee c0       	rjmp	.+476    	; 0x1a0c <vfscanf+0x20e>
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <isspace>
    1836:	89 2b       	or	r24, r25
    1838:	21 f0       	breq	.+8      	; 0x1842 <vfscanf+0x44>
    183a:	c6 01       	movw	r24, r12
    183c:	0e 94 96 0a 	call	0x152c	; 0x152c <skip_spaces>
    1840:	eb cf       	rjmp	.-42     	; 0x1818 <vfscanf+0x1a>
    1842:	15 32       	cpi	r17, 0x25	; 37
    1844:	41 f4       	brne	.+16     	; 0x1856 <vfscanf+0x58>
    1846:	fe 01       	movw	r30, r28
    1848:	e3 fc       	sbrc	r14, 3
    184a:	15 91       	lpm	r17, Z+
    184c:	e3 fe       	sbrs	r14, 3
    184e:	11 91       	ld	r17, Z+
    1850:	ef 01       	movw	r28, r30
    1852:	15 32       	cpi	r17, 0x25	; 37
    1854:	81 f4       	brne	.+32     	; 0x1876 <vfscanf+0x78>
    1856:	c6 01       	movw	r24, r12
    1858:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <fgetc>
    185c:	97 fd       	sbrc	r25, 7
    185e:	d4 c0       	rjmp	.+424    	; 0x1a08 <vfscanf+0x20a>
    1860:	41 2f       	mov	r20, r17
    1862:	50 e0       	ldi	r21, 0x00	; 0
    1864:	9c 01       	movw	r18, r24
    1866:	33 27       	eor	r19, r19
    1868:	24 17       	cp	r18, r20
    186a:	35 07       	cpc	r19, r21
    186c:	a9 f2       	breq	.-86     	; 0x1818 <vfscanf+0x1a>
    186e:	b6 01       	movw	r22, r12
    1870:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <ungetc>
    1874:	cb c0       	rjmp	.+406    	; 0x1a0c <vfscanf+0x20e>
    1876:	1a 32       	cpi	r17, 0x2A	; 42
    1878:	39 f4       	brne	.+14     	; 0x1888 <vfscanf+0x8a>
    187a:	e3 fc       	sbrc	r14, 3
    187c:	15 91       	lpm	r17, Z+
    187e:	e3 fe       	sbrs	r14, 3
    1880:	11 91       	ld	r17, Z+
    1882:	ef 01       	movw	r28, r30
    1884:	01 e0       	ldi	r16, 0x01	; 1
    1886:	01 c0       	rjmp	.+2      	; 0x188a <vfscanf+0x8c>
    1888:	00 e0       	ldi	r16, 0x00	; 0
    188a:	f1 2c       	mov	r15, r1
    188c:	20 ed       	ldi	r18, 0xD0	; 208
    188e:	21 0f       	add	r18, r17
    1890:	2a 30       	cpi	r18, 0x0A	; 10
    1892:	80 f4       	brcc	.+32     	; 0x18b4 <vfscanf+0xb6>
    1894:	02 60       	ori	r16, 0x02	; 2
    1896:	6f 2d       	mov	r22, r15
    1898:	70 e0       	ldi	r23, 0x00	; 0
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	40 e2       	ldi	r20, 0x20	; 32
    18a0:	0e 94 6f 0a 	call	0x14de	; 0x14de <mulacc>
    18a4:	f6 2e       	mov	r15, r22
    18a6:	fe 01       	movw	r30, r28
    18a8:	e3 fc       	sbrc	r14, 3
    18aa:	15 91       	lpm	r17, Z+
    18ac:	e3 fe       	sbrs	r14, 3
    18ae:	11 91       	ld	r17, Z+
    18b0:	ef 01       	movw	r28, r30
    18b2:	ec cf       	rjmp	.-40     	; 0x188c <vfscanf+0x8e>
    18b4:	01 ff       	sbrs	r16, 1
    18b6:	03 c0       	rjmp	.+6      	; 0x18be <vfscanf+0xc0>
    18b8:	f1 10       	cpse	r15, r1
    18ba:	03 c0       	rjmp	.+6      	; 0x18c2 <vfscanf+0xc4>
    18bc:	a7 c0       	rjmp	.+334    	; 0x1a0c <vfscanf+0x20e>
    18be:	ff 24       	eor	r15, r15
    18c0:	fa 94       	dec	r15
    18c2:	18 36       	cpi	r17, 0x68	; 104
    18c4:	19 f0       	breq	.+6      	; 0x18cc <vfscanf+0xce>
    18c6:	1c 36       	cpi	r17, 0x6C	; 108
    18c8:	51 f0       	breq	.+20     	; 0x18de <vfscanf+0xe0>
    18ca:	10 c0       	rjmp	.+32     	; 0x18ec <vfscanf+0xee>
    18cc:	fe 01       	movw	r30, r28
    18ce:	e3 fc       	sbrc	r14, 3
    18d0:	15 91       	lpm	r17, Z+
    18d2:	e3 fe       	sbrs	r14, 3
    18d4:	11 91       	ld	r17, Z+
    18d6:	ef 01       	movw	r28, r30
    18d8:	18 36       	cpi	r17, 0x68	; 104
    18da:	41 f4       	brne	.+16     	; 0x18ec <vfscanf+0xee>
    18dc:	08 60       	ori	r16, 0x08	; 8
    18de:	04 60       	ori	r16, 0x04	; 4
    18e0:	fe 01       	movw	r30, r28
    18e2:	e3 fc       	sbrc	r14, 3
    18e4:	15 91       	lpm	r17, Z+
    18e6:	e3 fe       	sbrs	r14, 3
    18e8:	11 91       	ld	r17, Z+
    18ea:	ef 01       	movw	r28, r30
    18ec:	11 23       	and	r17, r17
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <vfscanf+0xf4>
    18f0:	8d c0       	rjmp	.+282    	; 0x1a0c <vfscanf+0x20e>
    18f2:	61 2f       	mov	r22, r17
    18f4:	70 e0       	ldi	r23, 0x00	; 0
    18f6:	84 e5       	ldi	r24, 0x54	; 84
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <strchr_P>
    18fe:	89 2b       	or	r24, r25
    1900:	09 f4       	brne	.+2      	; 0x1904 <vfscanf+0x106>
    1902:	84 c0       	rjmp	.+264    	; 0x1a0c <vfscanf+0x20e>
    1904:	00 fd       	sbrc	r16, 0
    1906:	07 c0       	rjmp	.+14     	; 0x1916 <vfscanf+0x118>
    1908:	f5 01       	movw	r30, r10
    190a:	80 80       	ld	r8, Z
    190c:	91 80       	ldd	r9, Z+1	; 0x01
    190e:	c5 01       	movw	r24, r10
    1910:	02 96       	adiw	r24, 0x02	; 2
    1912:	5c 01       	movw	r10, r24
    1914:	02 c0       	rjmp	.+4      	; 0x191a <vfscanf+0x11c>
    1916:	81 2c       	mov	r8, r1
    1918:	91 2c       	mov	r9, r1
    191a:	1e 36       	cpi	r17, 0x6E	; 110
    191c:	51 f4       	brne	.+20     	; 0x1932 <vfscanf+0x134>
    191e:	f6 01       	movw	r30, r12
    1920:	46 81       	ldd	r20, Z+6	; 0x06
    1922:	57 81       	ldd	r21, Z+7	; 0x07
    1924:	60 e0       	ldi	r22, 0x00	; 0
    1926:	70 e0       	ldi	r23, 0x00	; 0
    1928:	20 2f       	mov	r18, r16
    192a:	c4 01       	movw	r24, r8
    192c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <putval>
    1930:	73 cf       	rjmp	.-282    	; 0x1818 <vfscanf+0x1a>
    1932:	13 36       	cpi	r17, 0x63	; 99
    1934:	a9 f4       	brne	.+42     	; 0x1960 <vfscanf+0x162>
    1936:	01 fd       	sbrc	r16, 1
    1938:	02 c0       	rjmp	.+4      	; 0x193e <vfscanf+0x140>
    193a:	ff 24       	eor	r15, r15
    193c:	f3 94       	inc	r15
    193e:	c6 01       	movw	r24, r12
    1940:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <fgetc>
    1944:	97 fd       	sbrc	r25, 7
    1946:	60 c0       	rjmp	.+192    	; 0x1a08 <vfscanf+0x20a>
    1948:	81 14       	cp	r8, r1
    194a:	91 04       	cpc	r9, r1
    194c:	29 f0       	breq	.+10     	; 0x1958 <vfscanf+0x15a>
    194e:	f4 01       	movw	r30, r8
    1950:	80 83       	st	Z, r24
    1952:	c4 01       	movw	r24, r8
    1954:	01 96       	adiw	r24, 0x01	; 1
    1956:	4c 01       	movw	r8, r24
    1958:	fa 94       	dec	r15
    195a:	f1 10       	cpse	r15, r1
    195c:	f0 cf       	rjmp	.-32     	; 0x193e <vfscanf+0x140>
    195e:	50 c0       	rjmp	.+160    	; 0x1a00 <vfscanf+0x202>
    1960:	1b 35       	cpi	r17, 0x5B	; 91
    1962:	59 f4       	brne	.+22     	; 0x197a <vfscanf+0x17c>
    1964:	9e 01       	movw	r18, r28
    1966:	a4 01       	movw	r20, r8
    1968:	6f 2d       	mov	r22, r15
    196a:	c6 01       	movw	r24, r12
    196c:	0e 94 41 0b 	call	0x1682	; 0x1682 <conv_brk>
    1970:	ec 01       	movw	r28, r24
    1972:	89 2b       	or	r24, r25
    1974:	09 f0       	breq	.+2      	; 0x1978 <vfscanf+0x17a>
    1976:	44 c0       	rjmp	.+136    	; 0x1a00 <vfscanf+0x202>
    1978:	3e c0       	rjmp	.+124    	; 0x19f6 <vfscanf+0x1f8>
    197a:	c6 01       	movw	r24, r12
    197c:	0e 94 96 0a 	call	0x152c	; 0x152c <skip_spaces>
    1980:	97 fd       	sbrc	r25, 7
    1982:	42 c0       	rjmp	.+132    	; 0x1a08 <vfscanf+0x20a>
    1984:	1f 36       	cpi	r17, 0x6F	; 111
    1986:	61 f1       	breq	.+88     	; 0x19e0 <vfscanf+0x1e2>
    1988:	28 f4       	brcc	.+10     	; 0x1994 <vfscanf+0x196>
    198a:	14 36       	cpi	r17, 0x64	; 100
    198c:	39 f1       	breq	.+78     	; 0x19dc <vfscanf+0x1de>
    198e:	19 36       	cpi	r17, 0x69	; 105
    1990:	51 f1       	breq	.+84     	; 0x19e6 <vfscanf+0x1e8>
    1992:	28 c0       	rjmp	.+80     	; 0x19e4 <vfscanf+0x1e6>
    1994:	13 37       	cpi	r17, 0x73	; 115
    1996:	71 f0       	breq	.+28     	; 0x19b4 <vfscanf+0x1b6>
    1998:	15 37       	cpi	r17, 0x75	; 117
    199a:	01 f1       	breq	.+64     	; 0x19dc <vfscanf+0x1de>
    199c:	23 c0       	rjmp	.+70     	; 0x19e4 <vfscanf+0x1e6>
    199e:	81 14       	cp	r8, r1
    19a0:	91 04       	cpc	r9, r1
    19a2:	29 f0       	breq	.+10     	; 0x19ae <vfscanf+0x1b0>
    19a4:	f4 01       	movw	r30, r8
    19a6:	60 82       	st	Z, r6
    19a8:	c4 01       	movw	r24, r8
    19aa:	01 96       	adiw	r24, 0x01	; 1
    19ac:	4c 01       	movw	r8, r24
    19ae:	fa 94       	dec	r15
    19b0:	ff 20       	and	r15, r15
    19b2:	71 f0       	breq	.+28     	; 0x19d0 <vfscanf+0x1d2>
    19b4:	c6 01       	movw	r24, r12
    19b6:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <fgetc>
    19ba:	3c 01       	movw	r6, r24
    19bc:	97 fd       	sbrc	r25, 7
    19be:	08 c0       	rjmp	.+16     	; 0x19d0 <vfscanf+0x1d2>
    19c0:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <isspace>
    19c4:	89 2b       	or	r24, r25
    19c6:	59 f3       	breq	.-42     	; 0x199e <vfscanf+0x1a0>
    19c8:	b6 01       	movw	r22, r12
    19ca:	c3 01       	movw	r24, r6
    19cc:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <ungetc>
    19d0:	81 14       	cp	r8, r1
    19d2:	91 04       	cpc	r9, r1
    19d4:	a9 f0       	breq	.+42     	; 0x1a00 <vfscanf+0x202>
    19d6:	f4 01       	movw	r30, r8
    19d8:	10 82       	st	Z, r1
    19da:	12 c0       	rjmp	.+36     	; 0x1a00 <vfscanf+0x202>
    19dc:	00 62       	ori	r16, 0x20	; 32
    19de:	03 c0       	rjmp	.+6      	; 0x19e6 <vfscanf+0x1e8>
    19e0:	00 61       	ori	r16, 0x10	; 16
    19e2:	01 c0       	rjmp	.+2      	; 0x19e6 <vfscanf+0x1e8>
    19e4:	00 64       	ori	r16, 0x40	; 64
    19e6:	20 2f       	mov	r18, r16
    19e8:	a4 01       	movw	r20, r8
    19ea:	6f 2d       	mov	r22, r15
    19ec:	c6 01       	movw	r24, r12
    19ee:	0e 94 af 0a 	call	0x155e	; 0x155e <conv_int>
    19f2:	81 11       	cpse	r24, r1
    19f4:	05 c0       	rjmp	.+10     	; 0x1a00 <vfscanf+0x202>
    19f6:	f6 01       	movw	r30, r12
    19f8:	83 81       	ldd	r24, Z+3	; 0x03
    19fa:	80 73       	andi	r24, 0x30	; 48
    19fc:	29 f4       	brne	.+10     	; 0x1a08 <vfscanf+0x20a>
    19fe:	06 c0       	rjmp	.+12     	; 0x1a0c <vfscanf+0x20e>
    1a00:	00 fd       	sbrc	r16, 0
    1a02:	0a cf       	rjmp	.-492    	; 0x1818 <vfscanf+0x1a>
    1a04:	53 94       	inc	r5
    1a06:	08 cf       	rjmp	.-496    	; 0x1818 <vfscanf+0x1a>
    1a08:	55 20       	and	r5, r5
    1a0a:	19 f0       	breq	.+6      	; 0x1a12 <vfscanf+0x214>
    1a0c:	85 2d       	mov	r24, r5
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <vfscanf+0x218>
    1a12:	8f ef       	ldi	r24, 0xFF	; 255
    1a14:	9f ef       	ldi	r25, 0xFF	; 255
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	ef e0       	ldi	r30, 0x0F	; 15
    1a1c:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <__epilogue_restores__+0x6>

00001a20 <isspace>:
    1a20:	91 11       	cpse	r25, r1
    1a22:	0c 94 2b 0e 	jmp	0x1c56	; 0x1c56 <__ctype_isfalse>
    1a26:	80 32       	cpi	r24, 0x20	; 32
    1a28:	19 f0       	breq	.+6      	; 0x1a30 <isspace+0x10>
    1a2a:	89 50       	subi	r24, 0x09	; 9
    1a2c:	85 50       	subi	r24, 0x05	; 5
    1a2e:	c8 f7       	brcc	.-14     	; 0x1a22 <isspace+0x2>
    1a30:	08 95       	ret

00001a32 <strchr_P>:
    1a32:	fc 01       	movw	r30, r24
    1a34:	05 90       	lpm	r0, Z+
    1a36:	06 16       	cp	r0, r22
    1a38:	21 f0       	breq	.+8      	; 0x1a42 <strchr_P+0x10>
    1a3a:	00 20       	and	r0, r0
    1a3c:	d9 f7       	brne	.-10     	; 0x1a34 <strchr_P+0x2>
    1a3e:	c0 01       	movw	r24, r0
    1a40:	08 95       	ret
    1a42:	31 97       	sbiw	r30, 0x01	; 1
    1a44:	cf 01       	movw	r24, r30
    1a46:	08 95       	ret

00001a48 <strnlen_P>:
    1a48:	fc 01       	movw	r30, r24
    1a4a:	05 90       	lpm	r0, Z+
    1a4c:	61 50       	subi	r22, 0x01	; 1
    1a4e:	70 40       	sbci	r23, 0x00	; 0
    1a50:	01 10       	cpse	r0, r1
    1a52:	d8 f7       	brcc	.-10     	; 0x1a4a <strnlen_P+0x2>
    1a54:	80 95       	com	r24
    1a56:	90 95       	com	r25
    1a58:	8e 0f       	add	r24, r30
    1a5a:	9f 1f       	adc	r25, r31
    1a5c:	08 95       	ret

00001a5e <strnlen>:
    1a5e:	fc 01       	movw	r30, r24
    1a60:	61 50       	subi	r22, 0x01	; 1
    1a62:	70 40       	sbci	r23, 0x00	; 0
    1a64:	01 90       	ld	r0, Z+
    1a66:	01 10       	cpse	r0, r1
    1a68:	d8 f7       	brcc	.-10     	; 0x1a60 <strnlen+0x2>
    1a6a:	80 95       	com	r24
    1a6c:	90 95       	com	r25
    1a6e:	8e 0f       	add	r24, r30
    1a70:	9f 1f       	adc	r25, r31
    1a72:	08 95       	ret

00001a74 <fgetc>:
    1a74:	cf 93       	push	r28
    1a76:	df 93       	push	r29
    1a78:	ec 01       	movw	r28, r24
    1a7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a7c:	20 ff       	sbrs	r18, 0
    1a7e:	33 c0       	rjmp	.+102    	; 0x1ae6 <fgetc+0x72>
    1a80:	26 ff       	sbrs	r18, 6
    1a82:	0a c0       	rjmp	.+20     	; 0x1a98 <fgetc+0x24>
    1a84:	2f 7b       	andi	r18, 0xBF	; 191
    1a86:	2b 83       	std	Y+3, r18	; 0x03
    1a88:	8e 81       	ldd	r24, Y+6	; 0x06
    1a8a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a8c:	01 96       	adiw	r24, 0x01	; 1
    1a8e:	9f 83       	std	Y+7, r25	; 0x07
    1a90:	8e 83       	std	Y+6, r24	; 0x06
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	29 c0       	rjmp	.+82     	; 0x1aea <fgetc+0x76>
    1a98:	22 ff       	sbrs	r18, 2
    1a9a:	0f c0       	rjmp	.+30     	; 0x1aba <fgetc+0x46>
    1a9c:	e8 81       	ld	r30, Y
    1a9e:	f9 81       	ldd	r31, Y+1	; 0x01
    1aa0:	80 81       	ld	r24, Z
    1aa2:	08 2e       	mov	r0, r24
    1aa4:	00 0c       	add	r0, r0
    1aa6:	99 0b       	sbc	r25, r25
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	19 f4       	brne	.+6      	; 0x1ab2 <fgetc+0x3e>
    1aac:	20 62       	ori	r18, 0x20	; 32
    1aae:	2b 83       	std	Y+3, r18	; 0x03
    1ab0:	1a c0       	rjmp	.+52     	; 0x1ae6 <fgetc+0x72>
    1ab2:	31 96       	adiw	r30, 0x01	; 1
    1ab4:	f9 83       	std	Y+1, r31	; 0x01
    1ab6:	e8 83       	st	Y, r30
    1ab8:	0e c0       	rjmp	.+28     	; 0x1ad6 <fgetc+0x62>
    1aba:	ea 85       	ldd	r30, Y+10	; 0x0a
    1abc:	fb 85       	ldd	r31, Y+11	; 0x0b
    1abe:	09 95       	icall
    1ac0:	97 ff       	sbrs	r25, 7
    1ac2:	09 c0       	rjmp	.+18     	; 0x1ad6 <fgetc+0x62>
    1ac4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac6:	01 96       	adiw	r24, 0x01	; 1
    1ac8:	11 f0       	breq	.+4      	; 0x1ace <fgetc+0x5a>
    1aca:	80 e2       	ldi	r24, 0x20	; 32
    1acc:	01 c0       	rjmp	.+2      	; 0x1ad0 <fgetc+0x5c>
    1ace:	80 e1       	ldi	r24, 0x10	; 16
    1ad0:	82 2b       	or	r24, r18
    1ad2:	8b 83       	std	Y+3, r24	; 0x03
    1ad4:	08 c0       	rjmp	.+16     	; 0x1ae6 <fgetc+0x72>
    1ad6:	2e 81       	ldd	r18, Y+6	; 0x06
    1ad8:	3f 81       	ldd	r19, Y+7	; 0x07
    1ada:	2f 5f       	subi	r18, 0xFF	; 255
    1adc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ade:	3f 83       	std	Y+7, r19	; 0x07
    1ae0:	2e 83       	std	Y+6, r18	; 0x06
    1ae2:	99 27       	eor	r25, r25
    1ae4:	02 c0       	rjmp	.+4      	; 0x1aea <fgetc+0x76>
    1ae6:	8f ef       	ldi	r24, 0xFF	; 255
    1ae8:	9f ef       	ldi	r25, 0xFF	; 255
    1aea:	df 91       	pop	r29
    1aec:	cf 91       	pop	r28
    1aee:	08 95       	ret

00001af0 <fputc>:
    1af0:	0f 93       	push	r16
    1af2:	1f 93       	push	r17
    1af4:	cf 93       	push	r28
    1af6:	df 93       	push	r29
    1af8:	fb 01       	movw	r30, r22
    1afa:	23 81       	ldd	r18, Z+3	; 0x03
    1afc:	21 fd       	sbrc	r18, 1
    1afe:	03 c0       	rjmp	.+6      	; 0x1b06 <fputc+0x16>
    1b00:	8f ef       	ldi	r24, 0xFF	; 255
    1b02:	9f ef       	ldi	r25, 0xFF	; 255
    1b04:	2c c0       	rjmp	.+88     	; 0x1b5e <fputc+0x6e>
    1b06:	22 ff       	sbrs	r18, 2
    1b08:	16 c0       	rjmp	.+44     	; 0x1b36 <fputc+0x46>
    1b0a:	46 81       	ldd	r20, Z+6	; 0x06
    1b0c:	57 81       	ldd	r21, Z+7	; 0x07
    1b0e:	24 81       	ldd	r18, Z+4	; 0x04
    1b10:	35 81       	ldd	r19, Z+5	; 0x05
    1b12:	42 17       	cp	r20, r18
    1b14:	53 07       	cpc	r21, r19
    1b16:	44 f4       	brge	.+16     	; 0x1b28 <fputc+0x38>
    1b18:	a0 81       	ld	r26, Z
    1b1a:	b1 81       	ldd	r27, Z+1	; 0x01
    1b1c:	9d 01       	movw	r18, r26
    1b1e:	2f 5f       	subi	r18, 0xFF	; 255
    1b20:	3f 4f       	sbci	r19, 0xFF	; 255
    1b22:	31 83       	std	Z+1, r19	; 0x01
    1b24:	20 83       	st	Z, r18
    1b26:	8c 93       	st	X, r24
    1b28:	26 81       	ldd	r18, Z+6	; 0x06
    1b2a:	37 81       	ldd	r19, Z+7	; 0x07
    1b2c:	2f 5f       	subi	r18, 0xFF	; 255
    1b2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b30:	37 83       	std	Z+7, r19	; 0x07
    1b32:	26 83       	std	Z+6, r18	; 0x06
    1b34:	14 c0       	rjmp	.+40     	; 0x1b5e <fputc+0x6e>
    1b36:	8b 01       	movw	r16, r22
    1b38:	ec 01       	movw	r28, r24
    1b3a:	fb 01       	movw	r30, r22
    1b3c:	00 84       	ldd	r0, Z+8	; 0x08
    1b3e:	f1 85       	ldd	r31, Z+9	; 0x09
    1b40:	e0 2d       	mov	r30, r0
    1b42:	09 95       	icall
    1b44:	89 2b       	or	r24, r25
    1b46:	e1 f6       	brne	.-72     	; 0x1b00 <fputc+0x10>
    1b48:	d8 01       	movw	r26, r16
    1b4a:	16 96       	adiw	r26, 0x06	; 6
    1b4c:	8d 91       	ld	r24, X+
    1b4e:	9c 91       	ld	r25, X
    1b50:	17 97       	sbiw	r26, 0x07	; 7
    1b52:	01 96       	adiw	r24, 0x01	; 1
    1b54:	17 96       	adiw	r26, 0x07	; 7
    1b56:	9c 93       	st	X, r25
    1b58:	8e 93       	st	-X, r24
    1b5a:	16 97       	sbiw	r26, 0x06	; 6
    1b5c:	ce 01       	movw	r24, r28
    1b5e:	df 91       	pop	r29
    1b60:	cf 91       	pop	r28
    1b62:	1f 91       	pop	r17
    1b64:	0f 91       	pop	r16
    1b66:	08 95       	ret

00001b68 <ungetc>:
    1b68:	fb 01       	movw	r30, r22
    1b6a:	23 81       	ldd	r18, Z+3	; 0x03
    1b6c:	20 ff       	sbrs	r18, 0
    1b6e:	12 c0       	rjmp	.+36     	; 0x1b94 <ungetc+0x2c>
    1b70:	26 fd       	sbrc	r18, 6
    1b72:	10 c0       	rjmp	.+32     	; 0x1b94 <ungetc+0x2c>
    1b74:	8f 3f       	cpi	r24, 0xFF	; 255
    1b76:	3f ef       	ldi	r19, 0xFF	; 255
    1b78:	93 07       	cpc	r25, r19
    1b7a:	61 f0       	breq	.+24     	; 0x1b94 <ungetc+0x2c>
    1b7c:	82 83       	std	Z+2, r24	; 0x02
    1b7e:	2f 7d       	andi	r18, 0xDF	; 223
    1b80:	20 64       	ori	r18, 0x40	; 64
    1b82:	23 83       	std	Z+3, r18	; 0x03
    1b84:	26 81       	ldd	r18, Z+6	; 0x06
    1b86:	37 81       	ldd	r19, Z+7	; 0x07
    1b88:	21 50       	subi	r18, 0x01	; 1
    1b8a:	31 09       	sbc	r19, r1
    1b8c:	37 83       	std	Z+7, r19	; 0x07
    1b8e:	26 83       	std	Z+6, r18	; 0x06
    1b90:	99 27       	eor	r25, r25
    1b92:	08 95       	ret
    1b94:	8f ef       	ldi	r24, 0xFF	; 255
    1b96:	9f ef       	ldi	r25, 0xFF	; 255
    1b98:	08 95       	ret

00001b9a <__ultoa_invert>:
    1b9a:	fa 01       	movw	r30, r20
    1b9c:	aa 27       	eor	r26, r26
    1b9e:	28 30       	cpi	r18, 0x08	; 8
    1ba0:	51 f1       	breq	.+84     	; 0x1bf6 <__ultoa_invert+0x5c>
    1ba2:	20 31       	cpi	r18, 0x10	; 16
    1ba4:	81 f1       	breq	.+96     	; 0x1c06 <__ultoa_invert+0x6c>
    1ba6:	e8 94       	clt
    1ba8:	6f 93       	push	r22
    1baa:	6e 7f       	andi	r22, 0xFE	; 254
    1bac:	6e 5f       	subi	r22, 0xFE	; 254
    1bae:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb0:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb4:	af 4f       	sbci	r26, 0xFF	; 255
    1bb6:	b1 e0       	ldi	r27, 0x01	; 1
    1bb8:	3e d0       	rcall	.+124    	; 0x1c36 <__ultoa_invert+0x9c>
    1bba:	b4 e0       	ldi	r27, 0x04	; 4
    1bbc:	3c d0       	rcall	.+120    	; 0x1c36 <__ultoa_invert+0x9c>
    1bbe:	67 0f       	add	r22, r23
    1bc0:	78 1f       	adc	r23, r24
    1bc2:	89 1f       	adc	r24, r25
    1bc4:	9a 1f       	adc	r25, r26
    1bc6:	a1 1d       	adc	r26, r1
    1bc8:	68 0f       	add	r22, r24
    1bca:	79 1f       	adc	r23, r25
    1bcc:	8a 1f       	adc	r24, r26
    1bce:	91 1d       	adc	r25, r1
    1bd0:	a1 1d       	adc	r26, r1
    1bd2:	6a 0f       	add	r22, r26
    1bd4:	71 1d       	adc	r23, r1
    1bd6:	81 1d       	adc	r24, r1
    1bd8:	91 1d       	adc	r25, r1
    1bda:	a1 1d       	adc	r26, r1
    1bdc:	20 d0       	rcall	.+64     	; 0x1c1e <__ultoa_invert+0x84>
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <__ultoa_invert+0x48>
    1be0:	68 94       	set
    1be2:	3f 91       	pop	r19
    1be4:	2a e0       	ldi	r18, 0x0A	; 10
    1be6:	26 9f       	mul	r18, r22
    1be8:	11 24       	eor	r1, r1
    1bea:	30 19       	sub	r19, r0
    1bec:	30 5d       	subi	r19, 0xD0	; 208
    1bee:	31 93       	st	Z+, r19
    1bf0:	de f6       	brtc	.-74     	; 0x1ba8 <__ultoa_invert+0xe>
    1bf2:	cf 01       	movw	r24, r30
    1bf4:	08 95       	ret
    1bf6:	46 2f       	mov	r20, r22
    1bf8:	47 70       	andi	r20, 0x07	; 7
    1bfa:	40 5d       	subi	r20, 0xD0	; 208
    1bfc:	41 93       	st	Z+, r20
    1bfe:	b3 e0       	ldi	r27, 0x03	; 3
    1c00:	0f d0       	rcall	.+30     	; 0x1c20 <__ultoa_invert+0x86>
    1c02:	c9 f7       	brne	.-14     	; 0x1bf6 <__ultoa_invert+0x5c>
    1c04:	f6 cf       	rjmp	.-20     	; 0x1bf2 <__ultoa_invert+0x58>
    1c06:	46 2f       	mov	r20, r22
    1c08:	4f 70       	andi	r20, 0x0F	; 15
    1c0a:	40 5d       	subi	r20, 0xD0	; 208
    1c0c:	4a 33       	cpi	r20, 0x3A	; 58
    1c0e:	18 f0       	brcs	.+6      	; 0x1c16 <__ultoa_invert+0x7c>
    1c10:	49 5d       	subi	r20, 0xD9	; 217
    1c12:	31 fd       	sbrc	r19, 1
    1c14:	40 52       	subi	r20, 0x20	; 32
    1c16:	41 93       	st	Z+, r20
    1c18:	02 d0       	rcall	.+4      	; 0x1c1e <__ultoa_invert+0x84>
    1c1a:	a9 f7       	brne	.-22     	; 0x1c06 <__ultoa_invert+0x6c>
    1c1c:	ea cf       	rjmp	.-44     	; 0x1bf2 <__ultoa_invert+0x58>
    1c1e:	b4 e0       	ldi	r27, 0x04	; 4
    1c20:	a6 95       	lsr	r26
    1c22:	97 95       	ror	r25
    1c24:	87 95       	ror	r24
    1c26:	77 95       	ror	r23
    1c28:	67 95       	ror	r22
    1c2a:	ba 95       	dec	r27
    1c2c:	c9 f7       	brne	.-14     	; 0x1c20 <__ultoa_invert+0x86>
    1c2e:	00 97       	sbiw	r24, 0x00	; 0
    1c30:	61 05       	cpc	r22, r1
    1c32:	71 05       	cpc	r23, r1
    1c34:	08 95       	ret
    1c36:	9b 01       	movw	r18, r22
    1c38:	ac 01       	movw	r20, r24
    1c3a:	0a 2e       	mov	r0, r26
    1c3c:	06 94       	lsr	r0
    1c3e:	57 95       	ror	r21
    1c40:	47 95       	ror	r20
    1c42:	37 95       	ror	r19
    1c44:	27 95       	ror	r18
    1c46:	ba 95       	dec	r27
    1c48:	c9 f7       	brne	.-14     	; 0x1c3c <__ultoa_invert+0xa2>
    1c4a:	62 0f       	add	r22, r18
    1c4c:	73 1f       	adc	r23, r19
    1c4e:	84 1f       	adc	r24, r20
    1c50:	95 1f       	adc	r25, r21
    1c52:	a0 1d       	adc	r26, r0
    1c54:	08 95       	ret

00001c56 <__ctype_isfalse>:
    1c56:	99 27       	eor	r25, r25
    1c58:	88 27       	eor	r24, r24

00001c5a <__ctype_istrue>:
    1c5a:	08 95       	ret

00001c5c <__prologue_saves__>:
    1c5c:	2f 92       	push	r2
    1c5e:	3f 92       	push	r3
    1c60:	4f 92       	push	r4
    1c62:	5f 92       	push	r5
    1c64:	6f 92       	push	r6
    1c66:	7f 92       	push	r7
    1c68:	8f 92       	push	r8
    1c6a:	9f 92       	push	r9
    1c6c:	af 92       	push	r10
    1c6e:	bf 92       	push	r11
    1c70:	cf 92       	push	r12
    1c72:	df 92       	push	r13
    1c74:	ef 92       	push	r14
    1c76:	ff 92       	push	r15
    1c78:	0f 93       	push	r16
    1c7a:	1f 93       	push	r17
    1c7c:	cf 93       	push	r28
    1c7e:	df 93       	push	r29
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
    1c84:	ca 1b       	sub	r28, r26
    1c86:	db 0b       	sbc	r29, r27
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	de bf       	out	0x3e, r29	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	cd bf       	out	0x3d, r28	; 61
    1c92:	09 94       	ijmp

00001c94 <__epilogue_restores__>:
    1c94:	2a 88       	ldd	r2, Y+18	; 0x12
    1c96:	39 88       	ldd	r3, Y+17	; 0x11
    1c98:	48 88       	ldd	r4, Y+16	; 0x10
    1c9a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c9c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c9e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ca0:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ca2:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ca4:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ca6:	b9 84       	ldd	r11, Y+9	; 0x09
    1ca8:	c8 84       	ldd	r12, Y+8	; 0x08
    1caa:	df 80       	ldd	r13, Y+7	; 0x07
    1cac:	ee 80       	ldd	r14, Y+6	; 0x06
    1cae:	fd 80       	ldd	r15, Y+5	; 0x05
    1cb0:	0c 81       	ldd	r16, Y+4	; 0x04
    1cb2:	1b 81       	ldd	r17, Y+3	; 0x03
    1cb4:	aa 81       	ldd	r26, Y+2	; 0x02
    1cb6:	b9 81       	ldd	r27, Y+1	; 0x01
    1cb8:	ce 0f       	add	r28, r30
    1cba:	d1 1d       	adc	r29, r1
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	f8 94       	cli
    1cc0:	de bf       	out	0x3e, r29	; 62
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	cd bf       	out	0x3d, r28	; 61
    1cc6:	ed 01       	movw	r28, r26
    1cc8:	08 95       	ret

00001cca <_exit>:
    1cca:	f8 94       	cli

00001ccc <__stop_program>:
    1ccc:	ff cf       	rjmp	.-2      	; 0x1ccc <__stop_program>
